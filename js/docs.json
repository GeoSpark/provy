{"provy":{"__doc__":null,"__name__":"provy","core":{"__doc__":null,"__name__":"provy.core","roles":{"Role":{"__doc__":"Base Role class. This is the class that is inherited by all provy's roles.\nThis class provides many utility methods for interacting with the remote server.\n<em>Sample usage</em>\n<pre class=\"sh_python\">\n    class MySampleRole(Role):\n        def provision(self):\n            self.register_template_loader('my.full.namespace')\n            self.execute('ls /home/myuser', sudo=False, stdout=False)\n</pre>","__fullName__":"provy.core.roles.Role","__methods__":[{"__doc__":"Changes the owner of a given directory. Please be advised that this method is recursive, so all contents of directory will belong to the specified user.\n<em>Parameters</em>\ndirectory - Directory to change owner.\nowner - User that should own this directory.\n<em>Sample Usage</em>\n<pre class=\"sh_python\">\n    class MySampleRole(Role):\n        def provision(self):\n            self.change_dir_owner(directory='/etc/my-path', owner='someuser')\n</pre>","__name__":"change_dir_owner"},{"__doc__":"Changes the owner of a given file.\n<em>Parameters</em>\npath - Path of the file.\nowner - User that should own this file.\n<em>Sample Usage</em>\n<pre class=\"sh_python\">\n    class MySampleRole(Role):\n        def provision(self):\n            self.change_file_owner(directory='/etc/init.d/someapp',\n                                   owner='someuser')\n</pre>","__name__":"change_file_owner"},{"__doc__":"Base cleanup method. This is meant to be overriden and does not do anything.\nThe cleanup method is the method that provy calls after all Roles have been provisioned and is meant to allow Roles to perform any cleaning of resources or finish any pending operations.\n<em>Sample usage</em>\n<pre class=\"sh_python\">\n    class MySampleRole(Role):\n        def cleanup(self):\n            pass\n</pre>","__name__":"cleanup"},{"__doc__":"Make sure the specified directory exists in the remote server.\n<em>Parameters</em>\ndirectory - Directory to be created if it does not exist.\nowner - If specified, the directory will be created under this user, otherwise the currently logged user is the owner.\nsudo - If specified, the directory is created under the super-user. This is particularly useful in conjunction with the owner parameter, to create folders for the owner where only the super-user can write.\n<em>Sample Usage</em>\n<pre class=\"sh_python\">\n    class MySampleRole(Role):\n        def provision(self):\n            self.ensure_dir('/etc/my-path', owner='myuser', sudo=True)\n</pre>","__name__":"ensure_dir"},{"__doc__":"This method is the bread and butter of provy and is a base for most other methods that interact with remote servers.\nIt allows you to perform any shell action in the remote server. It is an abstraction over fabric run and sudo methods.\n<em>Parameters</em>\nstdout - Defaults to True. If you specify this argument as False, the standard output of the command execution will not be displayed in the console.\nsudo - Defaults to False. Specifies whether this command needs to be run as the super-user.\n<em>Sample Usage</em>\n<pre class=\"sh_python\">\n    class MySampleRole(Role):\n        def provision(self):\n            self.execute('ls /', stdout=False, sudo=True)\n</pre>","__name__":"execute"},{"__doc__":"Just an abstraction over execute. This method executes the python code that is passed with python -c.\nIt has the same arguments as execute.\n<em>Sample Usage</em>\n<pre class=\"sh_python\">\n    class MySampleRole(Role):\n        def provision(self):\n            self.python_execute('import os; print os.curdir',\n                                    stdout=False, sudo=True)\n</pre>","__name__":"execute_python"},{"__doc__":"Returns the currently logged user in the remote server.\n<em>Sample Usage</em>\n<pre class=\"sh_python\">\n    class MySampleRole(Role):\n        def provision(self):\n            self.context['my-user'] = self.get_logged_user()\n</pre>","__name__":"get_logged_user"},{"__doc__":"Returns True if the given process is running (listed in the process listing), False otherwise.\n<em>Parameters</em>\nprocess - Regular expression string that specifies the process name.\nsudo - Indicates if the process listing should be done by the super-user.\n<em>Sample Usage</em>\n<pre class=\"sh_python\">\n    class MySampleRole(Role):\n        def provision(self):\n            if self.is_process_running('nginx', sudo=True):\n                self.execute('pkill nginx', stdout=False, sudo=True)","__name__":"is_process_running"},{"__doc__":"Returns True if the file exists locally.\n<em>Sample Usage</em>\n<pre class=\"sh_python\">\n    class MySampleRole(Role):\n        def provision(self):\n            if self.local_exists('/tmp/my-file'):\n                # do something\n</pre>","__name__":"local_exists"},{"__doc__":"Returns the path of a temporary directory in the local machine.\n<em>Sample Usage</em>\n<pre class=\"sh_python\">\n    class MySampleRole(Role):\n        def provision(self):\n            self.context['source_dir'] = self.local_temp_dir()\n</pre>","__name__":"local_temp_dir"},{"__doc__":"Logs a message to the console with the hour prepended.\n<em>Sample usage</em>\n<pre class=\"sh_python\">\n    class MySampleRole(Role):\n        def provision(self):\n            self.log('Hello World')\n</pre>","__name__":"log"},{"__doc__":"Calculates an md5 hash for a given file in the local system. Returns None if file does not exist.\n<em>Parameters</em>\npath - Path of the local file.\n<em>Sample Usage</em>\n<pre class=\"sh_python\">\n    class MySampleRole(Role):\n        def provision(self):\n            hash = self.md5_local('/tmp/my-file')\n</pre>","__name__":"md5_local"},{"__doc__":"Calculates an md5 hash for a given file in the remote server. Returns None if file does not exist.\n<em>Parameters</em>\npath - Path of the remote file.\n<em>Sample Usage</em>\n<pre class=\"sh_python\">\n    class MySampleRole(Role):\n        def provision(self):\n            hash = self.md5_remote('/tmp/my-file')\n</pre>","__name__":"md5_remote"},{"__doc__":"Base provision method. This is meant to be overriden and does not do anything.\nThe provision method of each Role is what provy calls on to provision servers.\n<em>Sample usage</em>\n<pre class=\"sh_python\">\n    class MySampleRole(Role):\n        def provision(self):\n            pass\n</pre>","__name__":"provision"},{"__doc__":"Provisions a role inside your role. This method is the way to call other roles if you don't need to call any methods other than provision.\nprovision_role keeps the context and lifecycle for the current server when calling the role and makes sure it is disposed correctly.\n<em>Sample usage</em>\n<pre class=\"sh_python\">\n    class MySampleRole(Role):\n        def provision(self):\n            self.provision_role(SomeOtherRole)\n</pre>","__name__":"provision_role"},{"__doc__":"Puts a file to the remote server.\n<em>Parameters</em>\nfrom_file - Source file in the local system.\nto_file - Target path in the remote server.\nsudo - Indicates whether the file should be created by the super-user.\n<em>Sample Usage</em>\n<pre class=\"sh_python\">\n    class MySampleRole(Role):\n        def provision(self):\n            self.put('/home/user/my-app', '/etc/init.d/my-app', sudo=True)\n</pre>","__name__":"put_file"},{"__doc__":"Returns the contents of a remote file.\n<em>Parameters</em>\npath - File path on the remote server.\nsudo - Indicates whether the file should be read by a super-user.\n<em>Sample Usage</em>\n<pre class=\"sh_python\">\n    class MySampleRole(Role):\n        def provision(self):\n            last_update = self.read_remote_file('/tmp/last-update')\n</pre>","__name__":"read_remote_file"},{"__doc__":"Register the <<package_name>> module as a valid source for templates in Jinja2.\nJinja2 will look inside a folder called 'templates' in the specified module.\nIt is paramount that this module can be imported by python. The path must be well-known or be a sub-path of the provyfile.py directory.\n<em>Sample usage</em>\n<pre class=\"sh_python\">\n    class MySampleRole(Role):\n        def provision(self):\n            self.register_template_loader('my.full.namespace')\n</pre>","__name__":"register_template_loader"},{"__doc__":"Returns True if the file exists in the remote server.\n<em>Sample Usage</em>\n<pre class=\"sh_python\">\n    class MySampleRole(Role):\n        def provision(self):\n            if self.remote_exists('/tmp/my-file'):\n                # do something\n</pre>","__name__":"remote_exists"},{"__doc__":"Returns True if the directory exists in the remote server.\n<em>Sample Usage</em>\n<pre class=\"sh_python\">\n    class MySampleRole(Role):\n        def provision(self):\n            if self.remote_exists_dir('/tmp'):\n                # do something\n</pre>","__name__":"remote_exists_dir"},{"__doc__":"Creates a symlink in the remote server.\n<em>Parameters</em>\nfrom_file - Symlink source.\nto_file - Symlink target.\nsudo - Indicates whether the symlink should be created by the super-user.\n<em>Sample Usage</em>\n<pre class=\"sh_python\">\n    class MySampleRole(Role):\n        def provision(self):\n            self.remote_symlink('/home/user/my-app', '/etc/init.d/my-app', sudo=True)\n</pre>","__name__":"remote_symlink"},{"__doc__":"Returns the path of a temporary directory in the remote server.\n<em>Sample Usage</em>\n<pre class=\"sh_python\">\n    class MySampleRole(Role):\n        def provision(self):\n            self.context['target_dir'] = self.remote_temp_dir()\n</pre>","__name__":"remote_temp_dir"},{"__doc__":"Removes a file in the remote server. Returns True in the event of the file actually been removed. False otherwise.\n<em>Parameters</em>\npath - Path of the remote file.\nsudo - Indicates whether the file should be removed by the super-user.\n<em>Sample Usage</em>\n<pre class=\"sh_python\">\n    class MySampleRole(Role):\n        def provision(self):\n            self.remove_file('/tmp/my-file', sudo=True)\n</pre>","__name__":"remove_file"},{"__doc__":"Renders a template with the given options and returns the rendered text.\nThe template_file parameter should be just the name of the file and not the file path. Jinja2 will look for templates at the files directory in the provyfile path, as well as in the templates directory of any registered module (check the <em>register_template_loader</em>).\nThe options parameter will extend the server context, so all context variables (including per-server options) are available to the renderer.\n<em>Parameters</em>\ntemplate_file - Template file path in the local system.\noptions - options to be passed to the template.\n<em>Sample Usage</em>\n<pre class=\"sh_python\">\n    class MySampleRole(Role):\n        def provision(self):\n            contents = self.render('my-template', { 'user': 'heynemann' })","__name__":"render"},{"__doc__":"Replaces a file in the remote server with a file from the local system.\n<em>Parameters</em>\nfrom_file - Path in the local system.\nto_file - Path in the remote system.\n<em>Sample Usage</em>\n<pre class=\"sh_python\">\n    class MySampleRole(Role):\n        def provision(self):\n            self.replace_file('/tmp/my-file', '/tmp/my-file')\n</pre>","__name__":"replace_file"},{"__doc__":"Makes sure that this role will be cleaned up properly after the server has been provisioned. Call this method in your provision method if you need your role's cleanup method to be called.\n<strong>Warning</strong>: If you are using the proper ways of calling roles (provision_role, using) in your role, you do not need to call this method.\n<em>Sample usage</em>\n<pre class=\"sh_python\">\n    class MySampleRole(Role):\n        def provision(self):\n            self.schedule_cleanup()\n</pre>","__name__":"schedule_cleanup"},{"__doc__":"One of the most used methods in provy. This method renders a template, then if the contents differ from the remote server (or the file does not exist at the remote server), it sends the results there.\nAgain, combining the parameters sudo and owner you can have files that belong to an user that is not a super-user in places that only a super-user can reach.\nReturns True if the file was updated, False otherwise.\n<em>Parameters</em>\nfrom_file - Template file in the local system.\nto_file - Target path in the remote server.\nowner - Owner for the file in the remote server.\noptions - Dictionary of options that can be used in the template.\nsudo - Indicates whether the file should be created by the super-user.\n<em>Sample Usage</em>\n<pre class=\"sh_python\">\n    class MySampleRole(Role):\n        def provision(self):\n            self.update_file('/home/user/my-app', '/etc/init.d/my-app',\n                                owner='my-user', {\n                                    'option_a': 1,\n                                    'option_b': 2\n                                }, sudo=True)\n</pre>","__name__":"update_file"},{"__doc__":"This method should be used when you want to use a different Role inside your own Role methods.\nIt returns a ContextManager object, so this is meant to go inside a <em>with</em> block.\n<em>Parameters</em>\nrole - Role to be used.\n<em>Sample Usage</em>\n<pre class=\"sh_python\">\n    class MySampleRole(Role):\n        def provision(self):\n            with self.using(AptitudeRole) as role:\n                role.ensure_package_installed('nginx')","__name__":"using"},{"__doc__":"Writes some text to a temporary file and returns the file path.\n<em>Parameters</em>\ntext - Text to be written to the temp file.\n<em>Sample Usage</em>\n<pre class=\"sh_python\">\n    class MySampleRole(Role):\n        def provision(self):\n            path = self.write_to_temp_file('some random text')\n            self.put_file(path, '/tmp/some-file')\n</pre>","__name__":"write_to_temp_file"}],"__module__":"provy.core.roles","__name__":"Role"},"__doc__":null,"__name__":"provy.core.roles"}},"more":{"__doc__":null,"__name__":"provy.more","centos":{"__doc__":null,"__name__":"provy.more.centos","package":{"__doc__":null,"__name__":"provy.more.centos.package","pip":{"PipRole":{"__doc__":null,"__fullName__":"provy.more.centos.package.pip.PipRole","__methods__":[{"__doc__":null,"__name__":"does_package_has_update"},{"__doc__":null,"__name__":"ensure_package_installed"},{"__doc__":null,"__name__":"ensure_package_up_to_date"},{"__doc__":null,"__name__":"get_package_latest_version"},{"__doc__":null,"__name__":"get_package_remote_version"},{"__doc__":null,"__name__":"is_package_installed"},{"__doc__":null,"__name__":"provision"}],"__module__":"provy.more.centos.package.pip","__name__":"PipRole"},"__doc__":null,"__name__":"provy.more.centos.package.pip"},"yum":{"YumRole":{"__doc__":null,"__fullName__":"provy.more.centos.package.yum.YumRole","__methods__":[{"__doc__":null,"__name__":"ensure_gpg_key"},{"__doc__":null,"__name__":"ensure_package_installed"},{"__doc__":null,"__name__":"ensure_up_to_date"},{"__doc__":null,"__name__":"ensure_yum_source"},{"__doc__":null,"__name__":"force_update"},{"__doc__":null,"__name__":"get_last_update_date"},{"__doc__":null,"__name__":"has_source"},{"__doc__":null,"__name__":"is_package_installed"},{"__doc__":null,"__name__":"provision"},{"__doc__":null,"__name__":"store_update_date"}],"__module__":"provy.more.centos.package.yum","__name__":"YumRole"},"__doc__":null,"__name__":"provy.more.centos.package.yum"}},"users":{"__doc__":null,"__name__":"provy.more.centos.users","user":{"UserRole":{"__doc__":null,"__fullName__":"provy.more.centos.users.user.UserRole","__methods__":[{"__doc__":null,"__name__":"ensure_group"},{"__doc__":null,"__name__":"ensure_user"},{"__doc__":null,"__name__":"group_exists"},{"__doc__":null,"__name__":"user_exists"},{"__doc__":null,"__name__":"user_in_group"}],"__module__":"provy.more.centos.users.user","__name__":"UserRole"},"__doc__":null,"__name__":"provy.more.centos.users.user"}}},"debian":{"__doc__":null,"__name__":"provy.more.debian","cache":{"__doc__":null,"__name__":"provy.more.debian.cache","varnish":{"VarnishRole":{"__doc__":null,"__fullName__":"provy.more.debian.cache.varnish.VarnishRole","__methods__":[{"__doc__":null,"__name__":"cleanup"},{"__doc__":null,"__name__":"ensure_conf"},{"__doc__":null,"__name__":"ensure_restart"},{"__doc__":null,"__name__":"ensure_vcl"},{"__doc__":null,"__name__":"provision"},{"__doc__":null,"__name__":"restart"}],"__module__":"provy.more.debian.cache.varnish","__name__":"VarnishRole"},"__doc__":null,"__name__":"provy.more.debian.cache.varnish"}},"monitoring":{"__doc__":null,"__name__":"provy.more.debian.monitoring","supervisor":{"SupervisorRole":{"__doc__":null,"__fullName__":"provy.more.debian.monitoring.supervisor.SupervisorRole","__methods__":[{"__doc__":null,"__name__":"cleanup"},{"__doc__":null,"__name__":"config"},{"__doc__":null,"__name__":"ensure_config_update"},{"__doc__":null,"__name__":"ensure_restart"},{"__doc__":null,"__name__":"provision"},{"__doc__":null,"__name__":"restart"},{"__doc__":null,"__name__":"update_config_file"},{"__doc__":null,"__name__":"update_init_script"},{"__doc__":null,"__name__":"with_program"}],"__module__":"provy.more.debian.monitoring.supervisor","__name__":"SupervisorRole"},"__doc__":null,"__name__":"provy.more.debian.monitoring.supervisor"}},"package":{"__doc__":null,"__name__":"provy.more.debian.package","aptitude":{"AptitudeRole":{"__doc__":null,"__fullName__":"provy.more.debian.package.aptitude.AptitudeRole","__methods__":[{"__doc__":null,"__name__":"ensure_aptitude_source"},{"__doc__":null,"__name__":"ensure_gpg_key"},{"__doc__":null,"__name__":"ensure_package_installed"},{"__doc__":null,"__name__":"ensure_up_to_date"},{"__doc__":null,"__name__":"force_update"},{"__doc__":null,"__name__":"get_last_update_date"},{"__doc__":null,"__name__":"has_source"},{"__doc__":null,"__name__":"is_package_installed"},{"__doc__":null,"__name__":"provision"},{"__doc__":null,"__name__":"store_update_date"}],"__module__":"provy.more.debian.package.aptitude","__name__":"AptitudeRole"},"__doc__":null,"__name__":"provy.more.debian.package.aptitude"},"pip":{"PipRole":{"__doc__":null,"__fullName__":"provy.more.debian.package.pip.PipRole","__methods__":[{"__doc__":null,"__name__":"does_package_has_update"},{"__doc__":null,"__name__":"ensure_package_installed"},{"__doc__":null,"__name__":"ensure_package_up_to_date"},{"__doc__":null,"__name__":"get_package_latest_version"},{"__doc__":null,"__name__":"get_package_remote_version"},{"__doc__":null,"__name__":"is_package_installed"},{"__doc__":null,"__name__":"provision"}],"__module__":"provy.more.debian.package.pip","__name__":"PipRole"},"__doc__":null,"__name__":"provy.more.debian.package.pip"}},"users":{"__doc__":null,"__name__":"provy.more.debian.users","ssh":{"SSHRole":{"__doc__":null,"__fullName__":"provy.more.debian.users.ssh.SSHRole","__methods__":[{"__doc__":null,"__name__":"ensure_ssh_key"},{"__doc__":null,"__name__":"generate_key_pair"},{"__doc__":null,"__name__":"generate_ssh_key"},{"__doc__":null,"__name__":"write_keys"}],"__module__":"provy.more.debian.users.ssh","__name__":"SSHRole"},"__doc__":null,"__name__":"provy.more.debian.users.ssh"},"user":{"UserRole":{"__doc__":null,"__fullName__":"provy.more.debian.users.user.UserRole","__methods__":[{"__doc__":null,"__name__":"ensure_group"},{"__doc__":null,"__name__":"ensure_user"},{"__doc__":null,"__name__":"group_exists"},{"__doc__":null,"__name__":"user_exists"},{"__doc__":null,"__name__":"user_in_group"}],"__module__":"provy.more.debian.users.user","__name__":"UserRole"},"__doc__":null,"__name__":"provy.more.debian.users.user"}},"vcs":{"__doc__":null,"__name__":"provy.more.debian.vcs","git":{"GitRole":{"__doc__":null,"__fullName__":"provy.more.debian.vcs.git.GitRole","__methods__":[{"__doc__":null,"__name__":"ensure_repository"},{"__doc__":null,"__name__":"provision"}],"__module__":"provy.more.debian.vcs.git","__name__":"GitRole"},"__doc__":null,"__name__":"provy.more.debian.vcs.git"}},"web":{"__doc__":null,"__name__":"provy.more.debian.web","nginx":{"NginxRole":{"__doc__":null,"__fullName__":"provy.more.debian.web.nginx.NginxRole","__methods__":[{"__doc__":null,"__name__":"available_site_for"},{"__doc__":null,"__name__":"cleanup"},{"__doc__":null,"__name__":"create_site"},{"__doc__":null,"__name__":"enabled_site_for"},{"__doc__":null,"__name__":"ensure_conf"},{"__doc__":null,"__name__":"ensure_restart"},{"__doc__":null,"__name__":"ensure_site_disabled"},{"__doc__":null,"__name__":"ensure_site_enabled"},{"__doc__":null,"__name__":"provision"},{"__doc__":null,"__name__":"restart"}],"__module__":"provy.more.debian.web.nginx","__name__":"NginxRole"},"__doc__":null,"__name__":"provy.more.debian.web.nginx"},"tornado":{"TornadoRole":{"__doc__":null,"__fullName__":"provy.more.debian.web.tornado.TornadoRole","__methods__":[{"__doc__":null,"__name__":"provision"}],"__module__":"provy.more.debian.web.tornado","__name__":"TornadoRole"},"__doc__":null,"__name__":"provy.more.debian.web.tornado"}}}}}}
