{"provy":{"__doc__":"This is provy's main namespace. All built-in roles start from this namespace.","__name__":"provy","core":{"__doc__":"provy's core classes. The modules in this namespace are the ones that run provy.","__name__":"provy.core","roles":{"Role":{"__doc__":"Base Role class. This is the class that is inherited by all provy's roles.\n    This class provides many utility methods for interacting with the remote server.\n    <em>Sample usage</em>\n    <pre class=\"sh_python\">\n    from provy.core import Role\n\n    class MySampleRole(Role):\n        def provision(self):\n            self.register_template_loader('my.full.namespace')\n            self.execute('ls /home/myuser', sudo=False, stdout=False)\n    </pre>","__fullName__":"provy.core.roles.Role","__methods__":[{"__doc__":"Changes the mode of a given directory.\n        <em>Parameters</em>\n        path - Path of the directory.\n        mode - Mode of the directory.\n        sudo - Indicates if the mode needs to be changed by the super-user.\n        recursive - Indicates if the mode of the objects in the path should be changed recursively.\n        <em>Sample Usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n\n        class MySampleRole(Role):\n            def provision(self):\n                self.change_dir_mode(directory='/home/user/logs',\n                                     mode=644,\n                                     recursive=True,\n                                     sudo=True)\n        </pre>","__name__":"change_dir_mode"},{"__doc__":"Changes the owner of a given directory. Please be advised that this method is recursive, so all contents of directory will belong to the specified user.\n        <em>Parameters</em>\n        directory - Directory to change owner.\n        owner - User that should own this directory.\n        <em>Sample Usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n\n        class MySampleRole(Role):\n            def provision(self):\n                self.change_dir_owner(directory='/etc/my-path', owner='someuser')\n        </pre>","__name__":"change_dir_owner"},{"__doc__":"Changes the mode of a given file.\n        <em>Parameters</em>\n        path - Path of the file.\n        mode - Mode of the file.\n        sudo - Indicates if the mode needs to be changed by the super-user.\n        <em>Sample Usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n\n        class MySampleRole(Role):\n            def provision(self):\n                self.change_file_mode(path='/etc/init.d/someapp',\n                                      mode=777)\n        </pre>","__name__":"change_file_mode"},{"__doc__":"Changes the owner of a given file.\n        <em>Parameters</em>\n        path - Path of the file.\n        owner - User that should own this file.\n        <em>Sample Usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n\n        class MySampleRole(Role):\n            def provision(self):\n                self.change_file_owner(directory='/etc/init.d/someapp',\n                                       owner='someuser')\n        </pre>","__name__":"change_file_owner"},{"__doc__":"Base cleanup method. This is meant to be overriden and does not do anything.\n        The cleanup method is the method that provy calls after all Roles have been provisioned and is meant to allow Roles to perform any cleaning of resources or finish any pending operations.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n\n        class MySampleRole(Role):\n            def cleanup(self):\n                pass\n        </pre>","__name__":"cleanup"},{"__doc__":"Make sure the specified directory exists in the remote server.\n        <em>Parameters</em>\n        directory - Directory to be created if it does not exist.\n        owner - If specified, the directory will be created under this user, otherwise the currently logged user is the owner.\n        sudo - If specified, the directory is created under the super-user. This is particularly useful in conjunction with the owner parameter, to create folders for the owner where only the super-user can write.\n        <em>Sample Usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n\n        class MySampleRole(Role):\n            def provision(self):\n                self.ensure_dir('/etc/my-path', owner='myuser', sudo=True)\n        </pre>","__name__":"ensure_dir"},{"__doc__":"Returns True if the given line of text is present in the given file. Returns False otherwise (even if the file does not exist).\n        <em>Parameters</em>\n        line - line of text to verify in the given file.\n        file_path - complete path of the remote file.\n        <em>Sample Usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n\n        class MySampleRole(Role):\n            def provision(self):\n                self.ensure_line('127.0.0.1     localhost', '/etc/hosts')","__name__":"ensure_line"},{"__doc__":"This method is the bread and butter of provy and is a base for most other methods that interact with remote servers.\n        It allows you to perform any shell action in the remote server. It is an abstraction over fabric run and sudo methods.\n        <em>Parameters</em>\n        stdout - Defaults to True. If you specify this argument as False, the standard output of the command execution will not be displayed in the console.\n        sudo - Defaults to False. Specifies whether this command needs to be run as the super-user. Doesn't need to be provided if the \"user\" parameter (below) is provided.\n        user - Defaults to None. If specified, will be the user with which the command will be executed.\n        <em>Sample Usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n\n        class MySampleRole(Role):\n            def provision(self):\n                self.execute('ls /', stdout=False, sudo=True)\n                self.execute('ls /', stdout=False, user='vip')\n        </pre>","__name__":"execute"},{"__doc__":"Just an abstraction over execute. This method executes the python code that is passed with python -c.\n        It has the same arguments as execute.\n        <em>Sample Usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n\n        class MySampleRole(Role):\n            def provision(self):\n                self.python_execute('import os; print os.curdir',\n                                        stdout=False, sudo=True)\n        </pre>","__name__":"execute_python"},{"__doc__":"Returns a DistroInfo with valuable information regarding the distribution of the server.\n        In the backgrounds, what it does is to run\n        $ lsb_release -a\n        in the server, so you might want to check which results are usual for your distribution.\n        <em>Sample Usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n\n        class MySampleRole(Role):\n            def provision(self):\n                distro_info = self.role.get_distro_info()\n\n                # Supposing the server is a Debian Squeeze, the following statements will probably be true:\n                distro_info.distributor_id == 'Debian'\n                distro_info.description == 'Debian GNU/Linux 6.0.5 (squeeze)'\n                distro_info.release == '6.0.5'\n                distro_info.codename == 'squeeze'\n\n                # Supposing the server is a Ubuntu Precise Pangolin, the following statements will probably be true:\n                distro_info.distributor_id == 'Ubuntu'\n                distro_info.description == 'Ubuntu 12.04.1 LTS'\n                distro_info.release == '12.04'\n                distro_info.codename == 'precise'\n\n                # Supposing the server is a CentOS, the following statements may be true:\n                distro_info.lsb_version == ':core-4.0-ia32:core-4.0-noarch:graphics-4.0-ia32:graphics-4.0-noarch:printing-4.0-ia32:printing-4.0-noarch'\n                distro_info.distributor_id == 'CentOS'\n                distro_info.description == 'CentOS release 5.8 (Final)'\n                distro_info.release == '5.8'\n                distro_info.codename == 'Final'","__name__":"get_distro_info"},{"__doc__":"Returns the currently logged user in the remote server.\n        <em>Sample Usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n\n        class MySampleRole(Role):\n            def provision(self):\n                self.context['my-user'] = self.get_logged_user()\n        </pre>","__name__":"get_logged_user"},{"__doc__":"Returns the mode of a given object.\n        <em>Parameters</em>\n        path - Path of the given object.\n        <em>Sample Usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n\n        class MySampleRole(Role):\n            def provision(self):\n                if self.get_object_mode('/home/user/logs') == 644:\n                    # do something\n        </pre>","__name__":"get_object_mode"},{"__doc__":"Returns True if the given line of text is present in the given file. Returns False otherwise (even if the file does not exist).\n        <em>Parameters</em>\n        line - line of text to verify in the given file.\n        file_path - complete path of the remote file.\n        <em>Sample Usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n\n        class MySampleRole(Role):\n            def provision(self):\n                if self.has_line('127.0.0.1 localhost', '/etc/hosts'):\n                    pass","__name__":"has_line"},{"__doc__":"Returns True if the given process is running (listed in the process listing), False otherwise.\n        <em>Parameters</em>\n        process - Regular expression string that specifies the process name.\n        sudo - Indicates if the process listing should be done by the super-user.\n        <em>Sample Usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n\n        class MySampleRole(Role):\n            def provision(self):\n                if self.is_process_running('nginx', sudo=True):\n                    self.execute('pkill nginx', stdout=False, sudo=True)","__name__":"is_process_running"},{"__doc__":"Returns True if the file exists locally.\n        <em>Sample Usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n\n        class MySampleRole(Role):\n            def provision(self):\n                if self.local_exists('/tmp/my-file'):\n                    # do something\n        </pre>","__name__":"local_exists"},{"__doc__":"Returns the path of a temporary directory in the local machine.\n        <em>Sample Usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n\n        class MySampleRole(Role):\n            def provision(self):\n                self.context['source_dir'] = self.local_temp_dir()\n        </pre>","__name__":"local_temp_dir"},{"__doc__":"Logs a message to the console with the hour prepended.\n        <em>Parameters</em>\n        msg - Message to log.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n\n        class MySampleRole(Role):\n            def provision(self):\n                self.log('Hello World')\n        </pre>","__name__":"log"},{"__doc__":"Calculates an md5 hash for a given file in the local system. Returns None if file does not exist.\n        <em>Parameters</em>\n        path - Path of the local file.\n        <em>Sample Usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n\n        class MySampleRole(Role):\n            def provision(self):\n                hash = self.md5_local('/tmp/my-file')\n        </pre>","__name__":"md5_local"},{"__doc__":"Calculates an md5 hash for a given file in the remote server. Returns None if file does not exist.\n        <em>Parameters</em>\n        path - Path of the remote file.\n        <em>Sample Usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n\n        class MySampleRole(Role):\n            def provision(self):\n                hash = self.md5_remote('/tmp/my-file')\n        </pre>","__name__":"md5_remote"},{"__doc__":"Base provision method. This is meant to be overriden and does not do anything.\n        The provision method of each Role is what provy calls on to provision servers.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n\n        class MySampleRole(Role):\n            def provision(self):\n                pass\n        </pre>","__name__":"provision"},{"__doc__":"Provisions a role inside your role. This method is the way to call other roles if you don't need to call any methods other than provision.\n        provision_role keeps the context and lifecycle for the current server when calling the role and makes sure it is disposed correctly.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n\n        class MySampleRole(Role):\n            def provision(self):\n                self.provision_role(SomeOtherRole)\n        </pre>","__name__":"provision_role"},{"__doc__":"Puts a file to the remote server.\n        <em>Parameters</em>\n        from_file - Source file in the local system.\n        to_file - Target path in the remote server.\n        sudo - Indicates whether the file should be created by the super-user.\n        <em>Sample Usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n\n        class MySampleRole(Role):\n            def provision(self):\n                self.put('/home/user/my-app',\n                         '/etc/init.d/my-app',\n                         sudo=True)\n        </pre>","__name__":"put_file"},{"__doc__":"Returns the contents of a remote file.\n        <em>Parameters</em>\n        path - File path on the remote server.\n        sudo - Indicates whether the file should be read by a super-user.\n        <em>Sample Usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n\n        class MySampleRole(Role):\n            def provision(self):\n                last_update = self.read_remote_file('/tmp/last-update')\n        </pre>","__name__":"read_remote_file"},{"__doc__":"Register the <<package_name>> module as a valid source for templates in jinja2.\n        Jinja2 will look inside a folder called 'templates' in the specified module.\n        It is paramount that this module can be imported by python. The path must be well-known or be a sub-path of the provyfile.py directory.\n        <em>Parameters</em>\n        package_name - full name of the module that jinja2 will try to import.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n\n        class MySampleRole(Role):\n            def provision(self):\n                self.register_template_loader('my.full.namespace')\n        </pre>","__name__":"register_template_loader"},{"__doc__":"Returns True if the file exists in the remote server.\n        <em>Sample Usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n\n        class MySampleRole(Role):\n            def provision(self):\n                if self.remote_exists('/tmp/my-file'):\n                    # do something\n        </pre>","__name__":"remote_exists"},{"__doc__":"Returns True if the directory exists in the remote server.\n        <em>Sample Usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n\n        class MySampleRole(Role):\n            def provision(self):\n                if self.remote_exists_dir('/tmp'):\n                    # do something\n        </pre>","__name__":"remote_exists_dir"},{"__doc__":"Creates a symlink in the remote server.\n        <em>Parameters</em>\n        from_file - Symlink source.\n        to_file - Symlink target.\n        sudo - Indicates whether the symlink should be created by the super-user.\n        <em>Sample Usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n\n        class MySampleRole(Role):\n            def provision(self):\n                self.remote_symlink('/home/user/my-app',\n                                    '/etc/init.d/my-app',\n                                    sudo=True)\n        </pre>","__name__":"remote_symlink"},{"__doc__":"Returns the path of a temporary directory in the remote server.\n        <em>Sample Usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n\n        class MySampleRole(Role):\n            def provision(self):\n                self.context['target_dir'] = self.remote_temp_dir()\n        </pre>","__name__":"remote_temp_dir"},{"__doc__":"Removes a directory in the remote server. Returns True in the event of the directory actually been removed. False otherwise.\n        <em>Parameters</em>\n        path - Path of the remote directory.\n        sudo - Indicates whether the directory should be removed by the super-user.\n        <em>Sample Usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n\n        class MySampleRole(Role):\n            def provision(self):\n                self.remove_dir('/tmp/my-dir', sudo=True)\n        </pre>","__name__":"remove_dir"},{"__doc__":"Removes a file in the remote server. Returns True in the event of the file actually been removed. False otherwise.\n        <em>Parameters</em>\n        path - Path of the remote file.\n        sudo - Indicates whether the file should be removed by the super-user.\n        <em>Sample Usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n\n        class MySampleRole(Role):\n            def provision(self):\n                self.remove_file('/tmp/my-file', sudo=True)\n        </pre>","__name__":"remove_file"},{"__doc__":"Renders a template with the given options and returns the rendered text.\n        The template_file parameter should be just the name of the file and not the file path. jinja2 will look for templates at the files directory in the provyfile path, as well as in the templates directory of any registered module (check the <em>register_template_loader</em> method).\n        The options parameter will extend the server context, so all context variables (including per-server options) are available to the renderer.\n        <em>Parameters</em>\n        template_file - Template file path in the local system.\n        options - options to be passed to the template.\n        <em>Sample Usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n\n        class MySampleRole(Role):\n            def provision(self):\n                contents = self.render('my-template', { 'user': 'heynemann' })","__name__":"render"},{"__doc__":"Replaces a file in the remote server with a file from the local system.\n        <em>Parameters</em>\n        from_file - Path in the local system.\n        to_file - Path in the remote system.\n        <em>Sample Usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n\n        class MySampleRole(Role):\n            def provision(self):\n                self.replace_file('/tmp/my-file', '/tmp/my-file')\n        </pre>","__name__":"replace_file"},{"__doc__":"Makes sure that this role will be cleaned up properly after the server has been provisioned. Call this method in your provision method if you need your role's cleanup method to be called.\n        <strong>Warning</strong>: If you are using the proper ways of calling roles (provision_role, using) in your role, you do not need to call this method.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n\n        class MySampleRole(Role):\n            def provision(self):\n                self.schedule_cleanup()\n        </pre>","__name__":"schedule_cleanup"},{"__doc__":"One of the most used methods in provy. This method renders a template, then if the contents differ from the remote server (or the file does not exist at the remote server), it sends the results there.\n        Again, combining the parameters sudo and owner you can have files that belong to an user that is not a super-user in places that only a super-user can reach.\n        Returns True if the file was updated, False otherwise.\n        <em>Parameters</em>\n        from_file - Template file in the local system.\n        to_file - Target path in the remote server.\n        owner - Owner for the file in the remote server.\n        options - Dictionary of options that can be used in the template.\n        sudo - Indicates whether the file should be created by the super-user.\n        <em>Sample Usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n\n        class MySampleRole(Role):\n            def provision(self):\n                self.update_file('/home/user/my-app',\n                                 '/etc/init.d/my-app',\n                                 owner='my-user',\n                                 {\n                                    'option_a': 1,\n                                    'option_b': 2\n                                 },\n                                 sudo=True)\n        </pre>","__name__":"update_file"},{"__doc__":"This method should be used when you want to use a different Role inside your own Role methods.\n        It returns a ContextManager object, so this is meant to go inside a <em>with</em> block.\n        <em>Parameters</em>\n        role - Role to be used.\n        <em>Sample Usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n\n        class MySampleRole(Role):\n            def provision(self):\n                with self.using(AptitudeRole) as role:\n                    role.ensure_package_installed('nginx')","__name__":"using"},{"__doc__":"Writes some text to a temporary file and returns the file path.\n        <em>Parameters</em>\n        text - Text to be written to the temp file.\n        <em>Sample Usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n\n        class MySampleRole(Role):\n            def provision(self):\n                path = self.write_to_temp_file('some random text')\n                self.put_file(path, '/tmp/some-file')\n        </pre>","__name__":"write_to_temp_file"}],"__module__":"provy.core.roles","__name__":"Role"},"__doc__":"Module responsible for the base Role and its operations.","__name__":"provy.core.roles"}},"more":{"__doc__":"provy's specialized Roles reside in this namespace.\nThis namespace is divided among the different operating systems provy supports.","__name__":"provy.more","centos":{"__doc__":"Roles in this namespace are suited for provisioning centos servers.","__name__":"provy.more.centos","database":{"__doc__":"Roles in this namespace are meant to enable database management for database servers as MySQL, MongoDB, Redis and such, in CentOS distributions.","__name__":"provy.more.centos.database","mysql":{"MySQLRole":{"__doc__":"This role provides MySQL database management utilities for CentOS distributions.\n    This role uses two context keys: mysql_root_user and mysql_root_pass. If none are found, it uses 'root' and empty password.\n    <em>Sample usage</em>\n    <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.centos import MySQLRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                with self.using(MySQLRole) as role:\n                    role.ensure_user(username=self.context['mysql_user'],\n                                     identified_by=self.context['mysql_password'])\n\n                    role.ensure_database(self.context['mysql_database'],\n                                         owner=self.context['mysql_user'])\n\n    </pre>","__fullName__":"provy.more.centos.database.mysql.MySQLRole","__methods__":[{"__doc__":"Creates the database if it does not exist.\n        <em>Parameters</em>\n        database_name - Database to create.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n            class MySampleRole(Role):\n                def provision(self):\n                    with self.using(MySQLRole) as role:\n                        role.ensure_database('database')\n        </pre>","__name__":"ensure_database"},{"__doc__":"Ensures that the given user has the given privileges on the specified location.\n        <em>Parameters</em>\n        privileges - Privileges to assign to user (i.e.: \"ALL PRIVILEGES\").\n        on - Object to assign privileges to. If only the name is supplied, '.*' will be appended to the name. If you want all databases pass '*.*'.\n        username - User to grant the privileges to.\n        login_from - Location where the user gets the grants. Defaults to '%'.\n        with_grant_option - If True, indicates that this user may grant other users the same privileges. Defaults to False.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n            class MySampleRole(Role):\n                def provision(self):\n                    with self.using(MySQLRole) as role:\n                        role.ensure_grant('ALL PRIVILEGES',\n                                          on='database',\n                                          username='backend',\n                                          login_from'%',\n                                          with_grant_option=True)\n        </pre>","__name__":"ensure_grant"},{"__doc__":"Ensure the given user is created in the database and can login from the specified location.\n        <em>Parameters</em>\n        username - name of the user to be created.\n        identified_by - password that the user will use to login to mysql server.\n        login_from - locations that this user can login from. Defaults to '%' (anywhere).\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n            class MySampleRole(Role):\n                def provision(self):\n                    with self.using(MySQLRole) as role:\n                        role.ensure_user('someuser', 'somepass', 'localhost')\n        </pre>","__name__":"ensure_user"},{"__doc__":"Returns all grants for the given user at the given location.\n        <em>Parameters</em>\n        username - User to verify.\n        login_from - Location to verify.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n            class MySampleRole(Role):\n                def provision(self):\n                    with self.using(MySQLRole) as role:\n                        if role.get_user_grants('user', login_from='%'):\n                            # do something\n        </pre>","__name__":"get_user_grants"},{"__doc__":"Returns all the available hosts that this user can login from.\n        <em>Parameters</em>\n        username - name of the user to be verified.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n            class MySampleRole(Role):\n                def provision(self):\n                    with self.using(MySQLRole) as role:\n                        if not '%' in role.get_user_hosts('someuser'):\n                            # do something\n        </pre>","__name__":"get_user_hosts"},{"__doc__":"Returns True if the user has the specified privileges on the specified object in the given location.\n        <em>Parameters</em>\n        privileges - Privileges that are being verified.\n        on - Database object that the user holds privileges on.\n        username - User to verify.\n        login_from - Location to verify.\n        with_grant_option - Indicates if we are verifying against grant option.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n            class MySampleRole(Role):\n                def provision(self):\n                    with self.using(MySQLRole) as role:\n                        if role.has_grant('ALL PRIVILEGES',\n                                          'database',\n                                          'user',\n                                          login_from='%',\n                                          with_grant_option=True):\n                            # do something\n        </pre>","__name__":"has_grant"},{"__doc__":"Returns True if the database is already created.\n        <em>Parameters</em>\n        database_name - Database to verify.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n            class MySampleRole(Role):\n                def provision(self):\n                    with self.using(MySQLRole) as role:\n                        if role.is_database_present('database'):\n                            # do something\n        </pre>","__name__":"is_database_present"},{"__doc__":"Installs MySQL Server and its dependencies. This method should be called upon if overriden in base classes, or MySQL won't work properly in the remote server.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n            class MySampleRole(Role):\n                def provision(self):\n                    self.provision_role(MySQLRole) # no need to call this if using with block.\n        </pre>","__name__":"provision"},{"__doc__":"Returns True if the given user exists for the given location in mysql server.\n        <em>Parameters</em>\n        username - name of the user to be verified.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n            class MySampleRole(Role):\n                def provision(self):\n                    with self.using(MySQLRole) as role:\n                        if not role.user_exists('someuser'):\n                            # do something\n        </pre>","__name__":"user_exists"}],"__module__":"provy.more.centos.database.mysql","__name__":"MySQLRole"},"__doc__":"Roles in this namespace are meant to provide MySQL database management utilities for CentOS distributions.","__name__":"provy.more.centos.database.mysql"}},"messaging":{"__doc__":"Roles in this namespace are meant to enable message queueing service\nmanagement as RabbitMq, Apache Qpid and such, in CentOS distributions.","__name__":"provy.more.centos.messaging","rabbitmq":{"RabbitMqRole":{"__doc__":"This role provides utility methods for Rabbitmq utilities\n    within CentOS distributions.\n\n    <em>Sample usage</em>\n    <pre class=\"sh_python\">\n    from provy.core import Role\n    from provy.more.centos import RabbitMqRole\n    from provy.more.centos import HostNameRole\n\n    class MySampleRole(Role):\n        def provision(self):\n\n            with self.using(HostNameRole) as role:\n                # From rabbitmq docs [1]:\n                # \"RabbitMQ names the database directory using the current\n                # hostname of the system. If the hostname changes, a new empty\n                # database is created.  To avoid data loss it's crucial to set\n                # up a fixed and resolvable hostname\"\n                #\n                # [1] http://www.rabbitmq.com/ec2.html\n\n                role.ensure_hostname('rabbit')\n\n            with self.using(RabbitMqRole) as role:\n                role.delete_user('guest')\n                role.ensure_user(\n                    self.context['rabbit_user'],\n                    self.context['rabbit_password'],\n                )\n                role.ensure_vhost(self.context['rabbit_vhost'])\n                role.ensure_permission(\n                    self.context['rabbit_vhost'],\n                    self.context['rabbit_user'],\n                    '\".*\" \".*\" \".*\"',\n                )\n    </pre>","__fullName__":"provy.more.centos.messaging.rabbitmq.RabbitMqRole","__methods__":[{"__doc__":"Delete user from rabbitmq if exists\n        <em>Parameters</em>\n        user - name of user to be deleted\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        class MySampleRole(Role):\n            def provision(self):\n                with self.using(RabbitMqRole) as role:\n                    role.delete_user('guest', some_pass)\n        </pre>","__name__":"delete_user"},{"__doc__":"Ensure the given user has the given permissions on the specified vhost\n        <em>Parameters</em>\n        vhost - virtual host name\n        username - User to ensure permissions\n        perms - Permissions to assign to user (i.e.: '\".*\" \".*\" \".*\"')\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        class MySampleRole(Role):\n            def provision(self):\n                with self.using(RabbitMqRole) as role:\n                    role.ensure_permission(\n                        'previous_created_vhost',\n                        'previous_created_user',\n                        '\".*\" \".*\" \".*\"',\n                    )\n        </pre>","__name__":"ensure_permission"},{"__doc__":"Ensure the given user is created in the database and can authenticate\n        with rabbitmq\n        <em>Parameters</em>\n        username - name of the user to be created.\n        password - password that the user will use to authenticate to rabbitmq\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        class MySampleRole(Role):\n            def provision(self):\n                with self.using(RabbitMqRole) as role:\n                    role.ensure_user(some_user, some_pass)\n        </pre>","__name__":"ensure_user"},{"__doc__":"Ensure the given vhost is created.\n        <em>Parameters</em>\n        vhost - vhost name\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        class MySampleRole(Role):\n            def provision(self):\n                with self.using(RabbitMqRole) as role:\n                    role.ensure_vhost('/some_vhost')\n        </pre>","__name__":"ensure_vhost"},{"__doc__":"Installs Rabbitmq and dependencies. This method should be called upon\n        if overriden in base classes, or Rabbitmq won't work properly in the\n        remote server.\n\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.centos import HgRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                self.provision_role(RabbitMqRole)\n        </pre>","__name__":"provision"},{"__doc__":null,"__name__":"user_exists"},{"__doc__":null,"__name__":"vhost_exists"}],"__module__":"provy.more.centos.messaging.rabbitmq","__name__":"RabbitMqRole"},"__doc__":"Roles in this namespace are meant to provide Rabbitmq utilities methods within\nCentOS distributions.","__name__":"provy.more.centos.messaging.rabbitmq"}},"networking":{"__doc__":"Roles in this namespace are meant to provide networking management capabilities for centos distributions.","__name__":"provy.more.centos.networking","hosts":{"HostsRole":{"__doc__":"This role provides hosts file management utilities for centos distributions.\n    <em>Sample usage</em>\n    <pre class=\"sh_python\">\n    from provy.core import Role\n    from provy.more.centos import HostsRole\n\n    class MySampleRole(Role):\n        def provision(self):\n            with self.using(HostsRole) as role:\n                role.ensure_host('localhost', '127.0.0.1')\n    </pre>","__fullName__":"provy.more.centos.networking.hosts.HostsRole","__methods__":[{"__doc__":null,"__name__":"ensure_host"}],"__module__":"provy.more.centos.networking.hosts","__name__":"HostsRole"},"__doc__":"Roles in this namespace are meant to provide hosts management operations for centos distributions.","__name__":"provy.more.centos.networking.hosts"}},"package":{"__doc__":"Roles in this namespace are meant to enable users to install packages using package managers such as Yum or Pip in CentOS distributions.","__name__":"provy.more.centos.package","pip":{"PipRole":{"__doc__":"This role provides package management operations with PIP within CentOS distributions.\n    <em>Sample usage</em>\n    <pre class=\"sh_python\">\n    from provy.core import Role\n    from provy.more.centos import PipRole\n\n    class MySampleRole(Role):\n        def provision(self):\n            with self.using(PipRole) as role:\n                role.ensure_package_installed('django', version='1.1.1')\n    </pre>","__fullName__":"provy.more.centos.package.pip.PipRole","__methods__":[{"__doc__":"Makes sure the package is installed with the specified version (Latest if None specified). This method does not verify and upgrade the package on subsequent provisions, though. Use <em>ensure_package_up_to_date</em> for this purpose instead.\n        <em>Parameters</em>\n        package_name - Name of the package to install.\n        version - If specified, installs this version of the package. Installs latest version otherwise.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.centos import PipRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                with self.using(PipRole) as role:\n                    role.ensure_package_installed('django', version='1.1.1')\n        </pre>","__name__":"ensure_package_installed"},{"__doc__":"Makes sure the package is installed and up-to-date with the latest version. This method verifies if there is a newer version for this package every time the server is provisioned. If a new version is found, it is installed.\n        <em>Parameters</em>\n        package_name - Name of the package to install.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.centos import PipRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                with self.using(PipRole) as role:\n                    role.ensure_package_is_up_to_date('django')\n        </pre>","__name__":"ensure_package_up_to_date"},{"__doc__":"Returns the latest available version of the package at the Python Package Index. If package is not available, returns None.\n        <em>Parameters</em>\n        package_name - Name of the package to verify.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.centos import PipRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                with self.using(PipRole) as role:\n                    version = role.get_package_remote_version('django')\n                    latest = role.get_package_latest_version('django')\n                    if version != latest:\n                        # do something\n                        # this check is not needed if you use ensure_package_up_to_date.\n        </pre>","__name__":"get_package_latest_version"},{"__doc__":"Returns the version of the package currently installed via PIP in the remote server. If package is not installed, returns None.\n        <em>Parameters</em>\n        package_name - Name of the package to verify.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.centos import PipRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                with self.using(PipRole) as role:\n                    version = role.get_package_remote_version('django')\n                    if version and version == '1.1.1':\n                        # do something\n        </pre>","__name__":"get_package_remote_version"},{"__doc__":"Returns True if the given package is installed via pip in the remote server, False otherwise.\n        <em>Parameters</em>\n        package_name - Name of the package to verify.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.centos import PipRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                with self.using(PipRole) as role:\n                    if role.is_package_installed('django', version='1.1.1'):\n                        # do something\n        </pre>","__name__":"is_package_installed"},{"__doc__":"Returns True if there is an update for the given package in the Python Package Index, False otherwise.\n        <em>Parameters</em>\n        package_name - Name of the package to verify.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.centos import PipRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                with self.using(PipRole) as role:\n                    if role.package_can_be_updated('django'):\n                        # do something\n                        # this check is not needed if you use ensure_package_up_to_date.\n        </pre>","__name__":"package_can_be_updated"},{"__doc__":"Installs pip dependencies. This method should be called upon if overriden in base classes, or PIP won't work properly in the remote server.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.centos import PipRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                self.provision_role(PipRole) # does not need to be called if using with block.\n        </pre>","__name__":"provision"}],"__module__":"provy.more.centos.package.pip","__name__":"PipRole"},"__doc__":"Roles in this namespace are meant to provision packages installed via the PIP package manager for CentOS distributions.","__name__":"provy.more.centos.package.pip"},"yum":{"YumRole":{"__doc__":"This role provides package management operations with Yum within CentOS distributions.\n    <em>Sample usage</em>\n    <pre class=\"sh_python\">\n    from provy.core import Role\n    from provy.more.centos import YumRole\n\n    class MySampleRole(Role):\n        def provision(self):\n            with self.using(YumRole) as role:\n                role.ensure_package_installed('nginx')\n    </pre>","__fullName__":"provy.more.centos.package.yum.YumRole","__methods__":[{"__doc__":"Ensures that the specified gpg key is imported into rpm.\n        <em>Parameters</em>\n        url - Url of the gpg key file.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.centos import YumRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                with self.using(YumRole) as role:\n                    role.ensure_gpg_key('http://some.url.com/to/key.gpg')\n        </pre>","__name__":"ensure_gpg_key"},{"__doc__":"Ensures that the given package is installed via Yum.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.centos import YumRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                with self.using(YumRole) as role:\n                    role.ensure_package_installed('nginx')\n        </pre>","__name__":"ensure_package_installed"},{"__doc__":"Makes sure Yum's repository is updated if it hasn't been updated in the last 30 minutes.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.centos import YumRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                with self.using(YumRole) as role:\n                    role.ensure_up_to_date()\n        </pre>","__name__":"ensure_up_to_date"},{"__doc__":"Ensures that the specified repository is in yum's list of repositories.\n        <em>Parameters</em>\n        source_string - repository string\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.centos import YumRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                with self.using(YumRole) as role:\n                    role.ensure_yum_source('some-path-to-a-repo')\n        </pre>","__name__":"ensure_yum_source"},{"__doc__":"Forces an update to Yum's repository.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.centos import YumRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                with self.using(YumRole) as role:\n                    role.force_update()\n        </pre>","__name__":"force_update"},{"__doc__":"Returns the date in the <em>update_date_file</em>.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.centos import YumRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                with self.using(YumRole) as role:\n                    last_update = role.get_last_update_date()\n        </pre>","__name__":"get_last_update_date"},{"__doc__":"Ensures that the specified repository is in yum's list of repositories.\n        <em>Parameters</em>\n        source_string - repository string\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.centos import YumRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                with self.using(YumRole) as role:\n                    if role.has_source('some-path-to-a-repo'):\n                        # do something\n        </pre>","__name__":"has_source"},{"__doc__":"Returns True if the given package is installed via Yum, False otherwise.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.centos import YumRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                with self.using(YumRole) as role:\n                    if role.is_package_installed('nginx'):\n                        # do something\n        </pre>","__name__":"is_package_installed"},{"__doc__":"Installs Yum dependencies. This method should be called upon if overriden in base classes, or Yum won't work properly in the remote server.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.centos import YumRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                self.provision_role(YumRole) # does not need to be called if using with block.\n        </pre>","__name__":"provision"},{"__doc__":"Updates the date in the <em>update_date_file</em>.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.centos import YumRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                with self.using(YumRole) as role:\n                    role.store_update_date()\n        </pre>","__name__":"store_update_date"}],"__module__":"provy.more.centos.package.yum","__name__":"YumRole"},"__doc__":"Roles in this namespace are meant to provision packages installed via the Yum package manager for CentOS distributions.","__name__":"provy.more.centos.package.yum"}},"users":{"__doc__":"Roles in this namespace are meant to enable user management in CentOS distributions.","__name__":"provy.more.centos.users","user":{"UserRole":{"__doc__":"This role provides many utility methods for user management operations within CentOS distributions.\n    <em>Sample usage</em>\n    <pre class=\"sh_python\">\n    from provy.core import Role\n    from provy.more.centos import UserRole\n\n    class MySampleRole(Role):\n        def provision(self):\n            with self.using(UserRole) as role:\n                role.ensure_user('myuser', identified_by='mypass', is_admin=True)\n    </pre>","__fullName__":"provy.more.centos.users.user.UserRole","__methods__":[{"__doc__":"Ensures that a given user group is present in the remote server.\n        <em>Parameters</em>\n        group_name - Name of the group to create.\n        group_id - GID of the group. Defaults to None and is optional.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.centos import UserRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                with self.using(UserRole) as role:\n                    role.ensure_group('users-group')\n        </pre>","__name__":"ensure_group"},{"__doc__":"Ensures that a given user is present in the remote server.\n        <em>Parameters</em>\n        username - Name of the user.\n        identified_by - Password that the user will use to login to the remote server. If set to None, the user will not have a password.\n        user_id - UID of the user. Defaults to None and is optional.\n        home_folder - Defaults to /home/&lt;username&gt;. Specifies the user's home folder.\n        default_script - Defaults to /bin/sh. Sets the user's default script, the one that will execute commands per default when logging in.\n        group - Defaults to the name of the user. Group that this user belongs to. If the group does not exist it is created prior to user creation.\n        is_admin - If set to True the user is added to the 'admin' user group as well.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.centos import UserRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                with self.using(UserRole) as role:\n                    role.ensure_user('myuser', identified_by='mypass', is_admin=True)\n        </pre>","__name__":"ensure_user"},{"__doc__":"Returns True if the given group exist, False otherwise.\n        <em>Parameters</em>\n        group_name - Name of the group to verify.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.centos import UserRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                with self.using(UserRole) as role:\n                    if role.group_exists('usersgroup'):\n                        # do something\n        </pre>","__name__":"group_exists"},{"__doc__":"Returns True if the given user exist, False otherwise.\n        <em>Parameters</em>\n        username - Name of the user to verify.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.centos import UserRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                with self.using(UserRole) as role:\n                    if role.user_exists('myuser'):\n                        # do something\n        </pre>","__name__":"user_exists"},{"__doc__":"Returns True if the given user is in the given group, False otherwise.\n        <em>Parameters</em>\n        username - Name of the user to verify.\n        group_name - Name of the group to verify.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.centos import UserRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                with self.using(UserRole) as role:\n                    if role.user_in_group('myuser', 'mygroup'):\n                        # do something\n        </pre>","__name__":"user_in_group"}],"__module__":"provy.more.centos.users.user","__name__":"UserRole"},"__doc__":"Roles in this namespace are meant to provide user management operations for CentOS distributions.","__name__":"provy.more.centos.users.user"}},"utils":{"__doc__":"Roles in this namespace are meant to enable message queueing service management as RabbitMq, Apache Qpid and such, in CentOS distributions.","__name__":"provy.more.centos.utils","hostname":{"HostNameRole":{"__doc__":null,"__fullName__":"provy.more.centos.utils.hostname.HostNameRole","__methods__":[{"__doc__":"Ensure a fixed hostname\n        <em>Parameters</em>\n        hostname - Hostname to be created\n        <em>Sample usage</em>\n        class MySampleRole(Role):\n            def provision(self):\n                with self.using(HostNameRole) as role:\n                    role.ensure_hostname('rabbit')","__name__":"ensure_hostname"}],"__module__":"provy.more.centos.utils.hostname","__name__":"HostNameRole"},"__doc__":"Roles in this namespace are meant to provide hostname utilities\nmethods within CentOS distributions.","__name__":"provy.more.centos.utils.hostname"}},"vcs":{"__doc__":"Roles in this namespace relate to <a href=\"http://en.wikipedia.org/wiki/Revision_control\">Version Control Systems</a> support in Debian distributions, such as git, svn or mercurial.","__name__":"provy.more.centos.vcs","git":{"GitRole":{"__doc__":"This role provides utility methods for Git repositories management within CentOS distributions.\n    <em>Sample usage</em>\n    <pre class=\"sh_python\">\n    from provy.core import Role\n    from provy.more.centos import GitRole\n\n    class MySampleRole(Role):\n        def provision(self):\n            with self.using(GitRole) as role:\n                role.ensure_repository('git://github.com/heynemann/provy.git',\n                                       '/home/user/provy',\n                                       owner='user',\n                                       branch='some-branch')\n    </pre>","__fullName__":"provy.more.centos.vcs.git.GitRole","__methods__":[{"__doc__":"Makes sure the repository is create in the remote server. This method does not update the repository or perform any operations in it. It is merely used to ensure that the repository exists in the specified path.\n        <em>Parameters</em>\n        repo - Git repository url.\n        path - Path to create the local repository.\n        owner - User that owns the repository directory.\n        branch - If specified, the given branch will be checked-out, otherwise it stays in the master branch.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.centos import GitRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                with self.using(GitRole) as role:\n                    role.ensure_repository('git://github.com/heynemann/provy.git',\n                                           '/home/user/provy',\n                                           owner='user',\n                                           branch='some-branch')\n        </pre>","__name__":"ensure_repository"},{"__doc__":"Installs git dependencies. This method should be called upon if overriden in base classes, or Git won't work properly in the remote server.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.centos import GitRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                self.provision_role(GitRole) # does not need to be called if using with block.\n        </pre>","__name__":"provision"}],"__module__":"provy.more.centos.vcs.git","__name__":"GitRole"},"__doc__":"Roles in this namespace are meant to provide Git repository creation operations within CentOS distributions.","__name__":"provy.more.centos.vcs.git"}}},"debian":{"__doc__":"Roles in this namespace are suited for provisioning debian-based distributions (Debian, Ubuntu, etc.).","__name__":"provy.more.debian","cache":{"__doc__":"Roles in this namespace are meant to provision caching engines, such as Varnish or Memcached in Debian distributions.","__name__":"provy.more.debian.cache","memcached":{"MemcachedRole":{"__doc__":"This role provides utility methods for Memcached configuration and execution within Debian distributions.\n    <em>Sample usage</em>\n    <pre class=\"sh_python\">\n    from provy.core import Role\n    from provy.more.debian import Memcached\n\n    class MySampleRole(Role):\n        def provision(self):\n            with self.using(MemcachedRole) as role:\n                role.ensure_conf(verbose_level=2)\n    </pre>","__fullName__":"provy.more.debian.cache.memcached.MemcachedRole","__methods__":[{"__doc__":"Restarts memcached if it needs to be restarted (any changes made during this server's provisioning).\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.debian import MemcachedRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                with self.using(MemcachedRole) as role:\n                    role.cleanup() # No need to call this if using a with block.\n        </pre>","__name__":"cleanup"},{"__doc__":"Ensures that Memcached's configuration file at the specified path is up-to-date.\n        <em>Parameters</em>\n        owner - owner of the config file. Defaults to root.\n        log_folder - Log memcached's output. Defaults to /var/log/memcached.\n        verbose_level - 0 for no verbosity, 1 for verbose, 2 for extra-verbose. Defaults to 0.\n        memory_in_mb - Start with a cap of 64 megs of memory. It's reasonable, and the daemon default. Note that the daemon will grow to this size, but does not start out holding this much memory.\n        host - Specify which IP address to listen on. The default is to listen on all IP addresses. This parameter is one of the only security measures that memcached has, so make sure it's listening on a firewalled interface. Defaults to 127.0.0.1.\n        port - Default connection port is 11211.\n        user - Run the daemon as this user. Defaults to nobody.\n        simultaneous_connections - Limit the number of simultaneous incoming connections. The default is 1024.\n        lock_down - Lock down all paged memory. Consult with the Memcached README and homepage before you do this. Defaults to False.\n        error_when_memory_exhausted - Return error when memory is exhausted (rather than removing items). Defaults to False.\n        maximize_core_file_limit - Maximize core file limit. Defaults to False.\n        conf_path - The path that the configuration file will be in the remote server. Defaults to /etc/memcached.conf.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.debian import MemcachedRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                with self.using(MemcachedRole) as role:\n                    role.ensure_conf()\n        </pre>","__name__":"ensure_conf"},{"__doc__":"Ensures that Memcached is restarted on cleanup phase.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.debian import MemcachedRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                with self.using(MemcachedRole) as role:\n                    role.ensure_restart() # No need to call this if using a with block.\n        </pre>","__name__":"ensure_restart"},{"__doc__":"Installs memcached and its dependencies. This method should be called upon if overriden in base classes, or Memcached won't work properly in the remote server.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.debian import MemcachedRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                self.provision_role(MemcachedRole) # does not need to be called if using with block.\n        </pre>","__name__":"provision"},{"__doc__":"Forcefully restarts Memcached in the remote server.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.debian import MemcachedRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                with self.using(MemcachedRole) as role:\n                    if not self.is_process_running('memcached'):\n                        role.restart()\n        </pre>","__name__":"restart"}],"__module__":"provy.more.debian.cache.memcached","__name__":"MemcachedRole"},"__doc__":"Roles in this namespace are meant to provide memcached configuration and execution utilities within Debian distributions.","__name__":"provy.more.debian.cache.memcached"},"varnish":{"VarnishRole":{"__doc__":"This role provides utility methods for Varnish configuration and execution within Debian distributions.\n    <em>Sample usage</em>\n    <pre class=\"sh_python\">\n    from provy.core import Role\n    from provy.more.debian import VarnishRole\n\n    class MySampleRole(Role):\n        def provision(self):\n            with self.using(VarnishRole) as role:\n                role.ensure_vcl('default.vcl', owner='user')\n                role.ensure_conf('default_varnish', owner='user')\n    </pre>","__fullName__":"provy.more.debian.cache.varnish.VarnishRole","__methods__":[{"__doc__":"Restarts Varnish if it needs to be restarted (any changes made during this server's provisioning).\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.debian import VarnishRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                with self.using(VarnishRole) as role:\n                    role.cleanup() # No need to call this if using a with block.\n        </pre>","__name__":"cleanup"},{"__doc__":"Ensures that Varnish's configuration file at the specified path is up-to-date.\n        <em>Parameters</em>\n        template - The name of the VCL template file.\n        varnish_conf_path - The path that the configuration file will be in the remote server. Defaults to /etc/default/varnish.\n        options - Dictionary of options to pass to the configuration template file. Extends context.\n        owner - Owner of the configuration file at the remote server.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.debian import VarnishRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                with self.using(VarnishRole) as role:\n                    role.ensure_conf('default_varnish', owner='user')\n        </pre>","__name__":"ensure_conf"},{"__doc__":"Ensures that Varnish is restarted on cleanup phase.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.debian import VarnishRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                with self.using(VarnishRole) as role:\n                    role.ensure_restart() # No need to call this if using a with block.\n        </pre>","__name__":"ensure_restart"},{"__doc__":"Ensures that the VCL file at the specified path is up-to-date.\n        <em>Parameters</em>\n        template - The name of the VCL template file.\n        varnish_vcl_path - The path that the VCL file will be in the remote server. Defaults to /etc/varnish/default.vcl.\n        options - Dictionary of options to pass to the VCL template file. Extends context.\n        owner - Owner of the VCL file at the remote server.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.debian import VarnishRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                with self.using(VarnishRole) as role:\n                    role.ensure_vcl('default.vcl', owner='user')\n        </pre>","__name__":"ensure_vcl"},{"__doc__":"Installs Varnish and its dependencies. This method should be called upon if overriden in base classes, or Varnish won't work properly in the remote server.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.debian import VarnishRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                self.provision_role(VarnishRole) # does not need to be called if using with block.\n        </pre>","__name__":"provision"},{"__doc__":"Forcefully restarts Varnish in the remote server.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.debian import VarnishRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                with self.using(VarnishRole) as role:\n                    if not self.is_process_running('varnishd'):\n                        role.restart()\n        </pre>","__name__":"restart"}],"__module__":"provy.more.debian.cache.varnish","__name__":"VarnishRole"},"__doc__":"Roles in this namespace are meant to provide Varnish configuration and execution utilities within Debian distributions.","__name__":"provy.more.debian.cache.varnish"}},"database":{"__doc__":"Roles in this namespace are meant to enable database management for database servers as MySQL, MongoDB, Redis and such, in Debian distributions.","__name__":"provy.more.debian.database","mongodb":{"MongoDBRole":{"__doc__":"This role provides MongoDB database management utilities for Debian distributions.\n    <em>Sample usage</em>\n    <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.debian import MongoDBRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                with self.using(MongoDBRole) as role:\n                    role.restart()\n\n    </pre>","__fullName__":"provy.more.debian.database.mongodb.MongoDBRole","__methods__":[{"__doc__":"Configures the MongoDB database according to a dictionary.\n        Some important details about this method:\n        <ul>\n            <li>It will leave configuration items untouched if they're not changed;</li>\n            <li>It will create a new configuration item if it doesn't exist yet;</li>\n            <li>It will overwrite the configuration items defined in the original configuration by the ones defined in the \"configuration\" argument, if they have the same name;</li>\n            <li>It will convert boolean items to lowercase (like \"True\" to \"true\"), when writing, to follow the mongodb.conf conventions;</li>\n            <li>It will leave file comments untouched, to avoid losing potentially important information;</li>\n        </ul>\n        <em>Parameters</em>\n        configuration - dict with the intended configuration items.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.debian import MongoDBRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                with self.using(MongoDBRole) as mongo:\n                    mongo.configure({\n                        'port': 9876,\n                        'replSet': 'my_replica_set',\n                    })\n        </pre>","__name__":"configure"},{"__doc__":"Installs MongoDB and its dependencies. This method should be called upon if overriden in base classes, or MongoDB won't work properly in the remote server.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.debian import MongoDBRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                self.provision_role(MongoDBRole) # no need to call this if using with block.\n        </pre>","__name__":"provision"},{"__doc__":"Installs MongoDB and its dependencies via Debian-specific repository.\n        It's not recommended that you use this method directly; Instead, provision this role directly and it will find out the best way to provision.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.debian import MongoDBRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                with self.using(MongoDBRole) as mongo:\n                    mongo.provision_to_debian()\n        </pre>","__name__":"provision_to_debian"},{"__doc__":"Installs MongoDB and its dependencies via Ubuntu-specific repository.\n        It's not recommended that you use this method directly; Instead, provision this role directly and it will find out the best way to provision.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.debian import MongoDBRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                with self.using(MongoDBRole) as mongo:\n                    mongo.provision_to_ubuntu()\n        </pre>","__name__":"provision_to_ubuntu"},{"__doc__":"Restarts the MongoDB database.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.debian import MongoDBRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                with self.using(MongoDBRole) as mongo:\n                    mongo.restart()\n        </pre>","__name__":"restart"}],"__module__":"provy.more.debian.database.mongodb","__name__":"MongoDBRole"},"__doc__":"Roles in this namespace are meant to provide MongoDB database management utilities for Debian distributions.","__name__":"provy.more.debian.database.mongodb"},"mysql":{"MySQLRole":{"__doc__":"This role provides MySQL database management utilities for Debian distributions.\n    This role uses two context keys: mysql_root_user and mysql_root_pass. If none are found, it uses 'root' and empty password.\n    <em>Sample usage</em>\n    <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.debian import MySQLRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                with self.using(MySQLRole) as role:\n                    role.ensure_user(username=self.context['mysql_user'],\n                                     identified_by=self.context['mysql_password'])\n\n                    role.ensure_database(self.context['mysql_database'],\n                                         owner=self.context['mysql_user'])\n\n    </pre>","__fullName__":"provy.more.debian.database.mysql.MySQLRole","__methods__":[{"__doc__":"Creates the database if it does not exist.\n        <em>Parameters</em>\n        database_name - Database to create.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n            class MySampleRole(Role):\n                def provision(self):\n                    with self.using(MySQLRole) as role:\n                        role.ensure_database('database')\n        </pre>","__name__":"ensure_database"},{"__doc__":"Ensures that the given user has the given privileges on the specified location.\n        <em>Parameters</em>\n        privileges - Privileges to assign to user (i.e.: \"ALL PRIVILEGES\").\n        on - Object to assign privileges to. If only the name is supplied, '.*' will be appended to the name. If you want all databases pass '*.*'.\n        username - User to grant the privileges to.\n        login_from - Location where the user gets the grants. Defaults to '%'.\n        with_grant_option - If True, indicates that this user may grant other users the same privileges. Defaults to False.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n            class MySampleRole(Role):\n                def provision(self):\n                    with self.using(MySQLRole) as role:\n                        role.ensure_grant('ALL PRIVILEGES',\n                                          on='database',\n                                          username='backend',\n                                          login_from'%',\n                                          with_grant_option=True)\n        </pre>","__name__":"ensure_grant"},{"__doc__":"Ensure the given user is created in the database and can login from the specified location.\n        <em>Parameters</em>\n        username - name of the user to be created.\n        identified_by - password that the user will use to login to mysql server.\n        login_from - locations that this user can login from. Defaults to '%' (anywhere).\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n            class MySampleRole(Role):\n                def provision(self):\n                    with self.using(MySQLRole) as role:\n                        role.ensure_user('someuser', 'somepass', 'localhost')\n        </pre>","__name__":"ensure_user"},{"__doc__":"Returns all grants for the given user at the given location.\n        <em>Parameters</em>\n        username - User to verify.\n        login_from - Location to verify.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n            class MySampleRole(Role):\n                def provision(self):\n                    with self.using(MySQLRole) as role:\n                        if role.get_user_grants('user', login_from='%'):\n                            # do something\n        </pre>","__name__":"get_user_grants"},{"__doc__":"Returns all the available hosts that this user can login from.\n        <em>Parameters</em>\n        username - name of the user to be verified.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n            class MySampleRole(Role):\n                def provision(self):\n                    with self.using(MySQLRole) as role:\n                        if not '%' in role.get_user_hosts('someuser'):\n                            # do something\n        </pre>","__name__":"get_user_hosts"},{"__doc__":"Returns True if the user has the specified privileges on the specified object in the given location.\n        <em>Parameters</em>\n        privileges - Privileges that are being verified.\n        on - Database object that the user holds privileges on.\n        username - User to verify.\n        login_from - Location to verify.\n        with_grant_option - Indicates if we are verifying against grant option.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n            class MySampleRole(Role):\n                def provision(self):\n                    with self.using(MySQLRole) as role:\n                        if role.has_grant('ALL PRIVILEGES',\n                                          'database',\n                                          'user',\n                                          login_from='%',\n                                          with_grant_option=True):\n                            # do something\n        </pre>","__name__":"has_grant"},{"__doc__":"Returns True if the database is already created.\n        <em>Parameters</em>\n        database_name - Database to verify.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n            class MySampleRole(Role):\n                def provision(self):\n                    with self.using(MySQLRole) as role:\n                        if role.is_database_present('database'):\n                            # do something\n        </pre>","__name__":"is_database_present"},{"__doc__":"Installs MySQL Server and its dependencies. This method should be called upon if overriden in base classes, or MySQL won't work properly in the remote server.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n            class MySampleRole(Role):\n                def provision(self):\n                    self.provision_role(MySQLRole) # no need to call this if using with block.\n        </pre>","__name__":"provision"},{"__doc__":"Returns True if the given user exists for the given location in mysql server.\n        <em>Parameters</em>\n        username - name of the user to be verified.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n            class MySampleRole(Role):\n                def provision(self):\n                    with self.using(MySQLRole) as role:\n                        if not role.user_exists('someuser'):\n                            # do something\n        </pre>","__name__":"user_exists"}],"__module__":"provy.more.debian.database.mysql","__name__":"MySQLRole"},"__doc__":"Roles in this namespace are meant to provide MySQL database management utilities for Debian distributions.","__name__":"provy.more.debian.database.mysql"},"postgresql":{"PostgreSQLRole":{"__doc__":"This role provides PostgreSQL database management utilities for Debian distributions.\n    <em>Sample usage</em>\n    <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.debian import PostgreSQLRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                with self.using(PostgreSQLRole) as role:\n                    role.ensure_user(\"john\")\n                    role.ensure_database(\"foo\", owner=\"john\")\n\n    </pre>","__fullName__":"provy.more.debian.database.postgresql.PostgreSQLRole","__methods__":[{"__doc__":"Creates a database.\n        <em>Parameters</em>\n        database - name of the database to be created.\n        owner - the database owner. If not provided, will be the Postgres default.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n            class MySampleRole(Role):\n                def provision(self):\n                    with self.using(PostgreSQLRole) as role:\n                        role.create_database(\"foo\", owner=\"john\")\n        </pre>","__name__":"create_database"},{"__doc__":"Creates a user for the database.\n        <em>Parameters</em>\n        username - name of the user to be created.\n        ask_password - if False, doesn't ask for the user password now. Defaults to True, which makes the role prompt for the password. Defaults to True.\n        is_superuser - if True, creates as a superuser and ignores can_create_databases and can_create_roles arguments (as they would be implicit). Defaults to False.\n        can_create_databases - if True, gives database creation privilege to the user. Defaults to False.\n        can_create_roles - if True, gives this user privilege to create other users. Defaults to False.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n            class MySampleRole(Role):\n                def provision(self):\n                    with self.using(PostgreSQLRole) as role:\n                        role.create_user(\"john\", ask_password=False)\n        </pre>","__name__":"create_user"},{"__doc__":"Checks if a database exists.\n        <em>Parameters</em>\n        database - name of the database to be checked.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n            class MySampleRole(Role):\n                def provision(self):\n                    with self.using(PostgreSQLRole) as role:\n                        role.database_exists(\"foo\") # True or False\n        </pre>","__name__":"database_exists"},{"__doc__":"Drops a database.\n        <em>Parameters</em>\n        database - name of the database to be dropped.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n            class MySampleRole(Role):\n                def provision(self):\n                    with self.using(PostgreSQLRole) as role:\n                        role.drop_database(\"foo\")\n        </pre>","__name__":"drop_database"},{"__doc__":"Drops a user from the database.\n        <em>Parameters</em>\n        username - name of the user to be dropped.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n            class MySampleRole(Role):\n                def provision(self):\n                    with self.using(PostgreSQLRole) as role:\n                        role.drop_user(\"john\")\n        </pre>","__name__":"drop_user"},{"__doc__":"Ensures that a database exists. If it doesn't, create it.\n        <em>Parameters</em>\n        database - name of the database to be checked/created.\n        owner - the database owner. If not provided, will be the Postgres default.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n            class MySampleRole(Role):\n                def provision(self):\n                    with self.using(PostgreSQLRole) as role:\n                        role.ensure_database(\"foo\", owner=\"john\")\n        </pre>","__name__":"ensure_database"},{"__doc__":"Ensures that a user exists in the database. If it doesn't, create it.\n        <em>Parameters</em>\n        username - name of the user to be checked/created.\n        ask_password - if False, doesn't ask for the user password now. Defaults to True, which makes the role prompt for the password.\n        is_superuser - if True, creates as a superuser and ignores can_create_databases and can_create_roles arguments (as they would be implicit). Defaults to False.\n        can_create_databases - if True, gives database creation privilege to the user. Defaults to False.\n        can_create_roles - if True, gives this user privilege to create other users. Defaults to False.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n            class MySampleRole(Role):\n                def provision(self):\n                    with self.using(PostgreSQLRole) as role:\n                        role.ensure_user(\"john\", ask_password=False)\n        </pre>","__name__":"ensure_user"},{"__doc__":"Installs PostgreSQL and its dependencies. This method should be called upon if overriden in base classes, or PostgreSQL won't work properly in the remote server.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n            class MySampleRole(Role):\n                def provision(self):\n                    self.provision_role(PostgreSQLRole) # no need to call this if using with block.\n        </pre>","__name__":"provision"},{"__doc__":"Checks if a user exists in the database.\n        <em>Parameters</em>\n        username - name of the user to be checked.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n            class MySampleRole(Role):\n                def provision(self):\n                    with self.using(PostgreSQLRole) as role:\n                        role.user_exists(\"john\") # True or False\n        </pre>","__name__":"user_exists"}],"__module__":"provy.more.debian.database.postgresql","__name__":"PostgreSQLRole"},"__doc__":"Roles in this namespace are meant to provide PostgreSQL database management utilities for Debian distributions.","__name__":"provy.more.debian.database.postgresql"},"redis":{"RedisRole":{"__doc__":"This role provides Redis key-value store management utilities for Debian distributions.\n    <em>Sample usage</em>\n    <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.debian import RedisRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                self.provision_role(RedisRole)\n\n    </pre>","__fullName__":"provy.more.debian.database.redis.RedisRole","__methods__":[{"__doc__":"Installs Redis and its dependencies. This method should be called upon if overriden in base classes, or Redis won't work properly in the remote server.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n            class MySampleRole(Role):\n                def provision(self):\n                    self.provision_role(RedisRole) # no need to call this if using with block.\n        </pre>","__name__":"provision"}],"__module__":"provy.more.debian.database.redis","__name__":"RedisRole"},"__doc__":null,"__name__":"provy.more.debian.database.redis"}},"monitoring":{"__doc__":"Roles in this namespace are meant to provision monitoring systems like Supervisor or log watch.","__name__":"provy.more.debian.monitoring","supervisor":{"SupervisorRole":{"__doc__":"This role provides supervisor monitoring utilities for Debian distributions.\n    <em>Sample usage</em>\n    <pre class=\"sh_python\">\n    from provy.core import Role\n    from provy.more.debian import SupervisorRole\n\n    class MySampleRole(Role):\n        def provision(self):\n            with self.using(SupervisorRole) as role:\n                role.config(\n                    config_file_directory='/home/backend',\n                    log_folder='/home/backend/logs',\n                    user=self.context['supervisor-user']\n                )\n\n                with role.with_program('website') as program:\n                    program.directory = '/home/backend/provy/tests/functional'\n                    program.command = 'python website.py 800%(process_num)s'\n                    program.number_of_processes = 4\n\n                    program.log_folder = '/home/backend/logs'\n    </pre>","__fullName__":"provy.more.debian.monitoring.supervisor.SupervisorRole","__methods__":[{"__doc__":"Updates the config file and/or init files and restarts supervisor if needed.\n        There's no need to call this method since provy's lifecycle will make sure it is called.","__name__":"cleanup"},{"__doc__":"Configures supervisor by creating a supervisord.conf file at the specified location.\n        <em>Parameters</em>\n        config_file_directory - directory to create the supervisord.conf file at the server.\n        log_folder - path where log files will be created by supervisor. Defaults to /var/log (if you use the default, make sure your user has access).\n        log_file_max_mb - Maximum size of log file in megabytes. Defaults to 50.\n        log_file_backups - Number of log backups that supervisor keeps. Defaults to 10.\n        log_level - Level of logging for supervisor. Defaults to 'info'.\n        pidfile - Path for the pidfile that supervisor creates for itself. Defaults to /var/run/supervisor.pid (if you use the default, make sure your user has access).\n        user - User that runs supervisor. Defaults to the last created user.\n\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.debian import SupervisorRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                with self.using(SupervisorRole) as role:\n                    role.config(\n                        config_file_directory='/home/backend',\n                        log_folder='/home/backend/logs',\n                        pidfile='/home/backend/supervisord.pid',\n                        user='backend'\n                    )\n        </pre>","__name__":"config"},{"__doc__":"Makes sure that the config file is updated upon cleanup.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.debian import SupervisorRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                with self.using(SupervisorRole) as role:\n                    role.ensure_config_update()\n        </pre>","__name__":"ensure_config_update"},{"__doc__":"Makes sure supervisor is restarted on cleanup.\n        There's no need to call this method since it will be called when changes occur by the other methods.","__name__":"ensure_restart"},{"__doc__":"Installs Supervisor and its dependencies. This method should be called upon if overriden in base classes, or Supervisor won't work properly in the remote server.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.debian import SupervisorRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                self.provision_role(SupervisorRole) # no need to call this if using with block.\n        </pre>","__name__":"provision"},{"__doc__":"Forcefully restarts supervisor.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.debian import SupervisorRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                with self.using(SupervisorRole) as role:\n                    role.restart()\n        </pre>","__name__":"restart"},{"__doc__":"Updates the config file to match the configurations done under the <em>config</em> method.\n        There's no need to call this method after config, since SupervisorRole cleanup will call it for you.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.debian import SupervisorRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                with self.using(SupervisorRole) as role:\n                    role.update_config_file()\n        </pre>","__name__":"update_config_file"},{"__doc__":"Creates a supervisord /etc/init.d script that points to the specified config file path.\n        <em>Parameters</em>\n        config_file_path - path to the supervisord.conf at the server.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.debian import SupervisorRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                with self.using(SupervisorRole) as role:\n                    role.update_init_script('/etc/supervisord.conf')\n        </pre>","__name__":"update_init_script"},{"__doc__":"Enters a with block with a Program variable that allows you to configure a program entry in supervisord.conf.\n        <em>Parameters</em>\n        name - name of the program being supervised.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.debian import SupervisorRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                with self.using(SupervisorRole) as role:\n                    with role.with_program('website') as program:\n                        program.directory = '/home/backend/provy/tests/functional'\n                        program.command = 'python website.py 800%(process_num)s'\n                        program.number_of_processes = 4\n                        program.log_folder = '/home/backend/logs'\n        </pre>","__name__":"with_program"}],"__module__":"provy.more.debian.monitoring.supervisor","__name__":"SupervisorRole"},"__doc__":"Roles in this namespace are meant to provide Supervisor monitoring utility methods for Debian distributions.","__name__":"provy.more.debian.monitoring.supervisor"}},"networking":{"__doc__":"Roles in this namespace are meant to provide networking management capabilities for debian distributions.","__name__":"provy.more.debian.networking","hosts":{"HostsRole":{"__doc__":"This role provides hosts file management utilities for debian distributions.\n    <em>Sample usage</em>\n    <pre class=\"sh_python\">\n    from provy.core import Role\n    from provy.more.debian import HostsRole\n\n    class MySampleRole(Role):\n        def provision(self):\n            with self.using(HostsRole) as role:\n                role.ensure_host('localhost', '127.0.0.1')\n    </pre>","__fullName__":"provy.more.debian.networking.hosts.HostsRole","__methods__":[{"__doc__":null,"__name__":"ensure_host"}],"__module__":"provy.more.debian.networking.hosts","__name__":"HostsRole"},"__doc__":"Roles in this namespace are meant to provide hosts management operations for debian distributions.","__name__":"provy.more.debian.networking.hosts"}},"package":{"__doc__":"Roles in this namespace are meant to enable users to install packages using package managers such as Aptitude or Pip in Debian distributions.","__name__":"provy.more.debian.package","aptitude":{"AptitudeRole":{"__doc__":"This role provides package management operations with Aptitude within Debian distributions.\n    <em>Sample usage</em>\n    <pre class=\"sh_python\">\n    from provy.core import Role\n    from provy.more.debian import AptitudeRole\n\n    class MySampleRole(Role):\n        def provision(self):\n            with self.using(AptitudeRole) as role:\n                role.ensure_package_installed('nginx')\n    </pre>","__fullName__":"provy.more.debian.package.aptitude.AptitudeRole","__methods__":[{"__doc__":"Ensures that the specified repository is in aptitude's list of repositories.\n        <em>Parameters</em>\n        source_string - repository string\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.debian import AptitudeRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                with self.using(AptitudeRole) as role:\n                    role.ensure_aptitude_source('deb http://www.las.ic.unicamp.br/pub/ubuntu/ natty main restricted')\n        </pre>","__name__":"ensure_aptitude_source"},{"__doc__":"Ensures that the specified gpg key is imported into aptitude.\n        <em>Parameters</em>\n        url - Url of the gpg key file.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.debian import AptitudeRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                with self.using(AptitudeRole) as role:\n                    role.ensure_gpg_key('http://some.url.com/to/key.gpg')\n        </pre>","__name__":"ensure_gpg_key"},{"__doc__":"Ensures that the given package is installed via aptitude.\n        <em>Parameters</em>\n        package_name - Name of the package to install\n        stdout - Indicates whether install progress should be shown to stdout. Defaults to False.\n        sudo - Indicates whether the package should be installed with the super user. Defaults to True.\n        <em>Exceptions</em>\n        Raises provy.more.debian.PackageNotFound if the package is not found in the repositories.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.debian import AptitudeRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                with self.using(AptitudeRole) as role:\n                    role.ensure_package_installed('nginx')\n        </pre>","__name__":"ensure_package_installed"},{"__doc__":"Makes sure aptitude's repository is updated if it hasn't been updated in the last 30 minutes.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.debian import AptitudeRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                with self.using(AptitudeRole) as role:\n                    role.ensure_up_to_date()\n        </pre>","__name__":"ensure_up_to_date"},{"__doc__":"Forces an update to aptitude's repository.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.debian import AptitudeRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                with self.using(AptitudeRole) as role:\n                    role.force_update()\n        </pre>","__name__":"force_update"},{"__doc__":"Returns the date in the <em>update_date_file</em>.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.debian import AptitudeRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                with self.using(AptitudeRole) as role:\n                    last_update = role.get_last_update_date()\n        </pre>","__name__":"get_last_update_date"},{"__doc__":"Returns True if the specified repository is in aptitude's list of repositories.\n        <em>Parameters</em>\n        source_string - repository string\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.debian import AptitudeRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                with self.using(AptitudeRole) as role:\n                    if role.has_source('deb http://www.las.ic.unicamp.br/pub/ubuntu/ natty main restricted'):\n                        # do something\n        </pre>","__name__":"has_source"},{"__doc__":"Returns True if the given package is installed via aptitude, False otherwise.\n        <em>Parameters</em>\n        package_name - Name of the package to verify\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.debian import AptitudeRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                with self.using(AptitudeRole) as role:\n                    if role.is_package_installed('nginx'):\n                        # do something\n        </pre>","__name__":"is_package_installed"},{"__doc__":"Checks if the given package exists.\n        <em>Parameters</em>\n        package - Name of the package to check\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.debian import AptitudeRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                with self.using(AptitudeRole) as role:\n                    role.package_exists('nginx') # True\n        </pre>","__name__":"package_exists"},{"__doc__":"Installs Aptitude dependencies. This method should be called upon if overriden in base classes, or Aptitude won't work properly in the remote server.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.debian import AptitudeRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                self.provision_role(AptitudeRole) # does not need to be called if using with block.\n        </pre>","__name__":"provision"},{"__doc__":"Updates the date in the <em>update_date_file</em>.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.debian import AptitudeRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                with self.using(AptitudeRole) as role:\n                    role.store_update_date()\n        </pre>","__name__":"store_update_date"}],"__module__":"provy.more.debian.package.aptitude","__name__":"AptitudeRole"},"__doc__":"Roles in this namespace are meant to provision packages installed via the Aptitude package manager for Debian distributions.","__name__":"provy.more.debian.package.aptitude"},"gem":{"GemRole":{"__doc__":"This role provides package management operations with gem within Debian distributions.\n    <em>Sample usage</em>\n    <pre class=\"sh_python\">\n    from provy.core import Role\n    from provy.more.debian import GemRole\n\n    class MySampleRole(Role):\n        def provision(self):\n            with self.using(GemRole) as role:\n                role.ensure_package_installed('activerecord', version='3.1.1')\n    </pre>","__fullName__":"provy.more.debian.package.gem.GemRole","__methods__":[{"__doc__":"Makes sure the package is installed with the specified version (Latest if None specified). This method does not verify and upgrade the package on subsequent provisions, though.\n        <em>Parameters</em>\n        package_name - Name of the package to install.\n        version - If specified, installs this version of the package. Installs latest version otherwise.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.debian import GemRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                with self.using(GemRole) as role:\n                    role.ensure_package_installed('activerecord', version='3.1.1')\n        </pre>","__name__":"ensure_package_installed"},{"__doc__":"Returns True if the given package is installed via gem in the remote server, False otherwise.\n        <em>Parameters</em>\n        package_name - Name of the package to verify.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.debian import GemRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                with self.using(GemRole) as role:\n                    if role.is_package_installed('activerecord', version='3.1.1'):\n                        # do something\n        </pre>","__name__":"is_package_installed"},{"__doc__":"Installs gem dependencies. This method should be called upon if overriden in base classes, or gem won't work properly in the remote server.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.debian import PipRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                self.provision_role(PipRole) # does not need to be called if using with block.\n        </pre>","__name__":"provision"}],"__module__":"provy.more.debian.package.gem","__name__":"GemRole"},"__doc__":"Roles in this namespace are meant to provision packages installed via the gem package manager for Debian distributions.","__name__":"provy.more.debian.package.gem"},"npm":{"NPMRole":{"__doc__":"This role provides package management operations with NPM within Debian distributions.\n    <em>Sample usage</em>\n    <pre class=\"sh_python\">\n    from provy.core import Role\n    from provy.more.debian import NPMRole\n\n    class MySampleRole(Role):\n        def provision(self):\n            with self.using(NPMRole) as role:\n                role.ensure_package_installed('socket.io', '0.6.17')\n    </pre>","__fullName__":"provy.more.debian.package.npm.NPMRole","__methods__":[{"__doc__":"Ensures that the given package in the given version is installed via NPM.\n        <em>Parameters</em>\n        package_name - Name of the package to install\n        version - version to install (or upgrade/downgrade to)\n        stdout - Indicates whether install progress should be shown to stdout. Defaults to False.\n        sudo - Indicates whether the package should be installed with the super user. Defaults to True.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.debian import NPMRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                with self.using(NPMRole) as role:\n                    role.ensure_package_installed('socket.io', '0.6.17')\n        </pre>","__name__":"ensure_package_installed"},{"__doc__":"Returns True if the given package is installed via NPM, False otherwise.\n        <em>Sample usage</em>\n        <em>Parameters</em>\n        package_name - Name of the package to verify\n        version - Version to verify\n        <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.debian import NPMRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                with self.using(NPMRole) as role:\n                    if role.is_package_installed('socket.io', '0.6.17'):\n                        # do something\n        </pre>","__name__":"is_package_installed"},{"__doc__":"Installs NPM. This method should be called upon if overriden in base classes, or NPM won't work properly in the remote server.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.debian import NPMRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                self.provision_role(NPMRole) # no need to call this if using with block.\n        </pre>","__name__":"provision"}],"__module__":"provy.more.debian.package.npm","__name__":"NPMRole"},"__doc__":"Roles in this namespace are meant to provision packages installed via the NPM package manager for Debian distributions.","__name__":"provy.more.debian.package.npm"},"pip":{"PipRole":{"__doc__":"This role provides package management operations with PIP within Debian distributions.\n    By default, all commands executed with this role will be executed with sudo, unless you set a different user (refer to the \"set_user\" method below).\n    You can also change the class parameters below in the class directly to have a global effect (use carefully!).\n    <em>Class/object properties</em>\n    use_sudo - if False, the packages will be installed as normal user. Defaults to True.\n    user - user through which the packages will be installed. Defaults to None, which means that, using together with the default use_sudo, will install packages globally.\n    <em>Sample usage</em>\n    <pre class=\"sh_python\">\n    from provy.core import Role\n    from provy.more.debian import PipRole\n\n    class MySampleRole(Role):\n        def provision(self):\n            with self.using(PipRole) as role:\n                role.ensure_package_installed('django', version='1.1.1')\n    </pre>","__fullName__":"provy.more.debian.package.pip.PipRole","__methods__":[{"__doc__":"Makes sure the package is installed with the specified version (Latest if None specified). This method does not verify and upgrade the package on subsequent provisions, though. Use <em>ensure_package_up_to_date</em> for this purpose instead.\n        <em>Parameters</em>\n        package_name - Name of the package to install.\n        version - If specified, installs this version of the package. Installs latest version otherwise. You can use >= or <= before version number to ensure package version.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.debian import PipRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                with self.using(PipRole) as role:\n                    role.ensure_package_installed('django', version='1.1.1')\n        </pre>","__name__":"ensure_package_installed"},{"__doc__":"Makes sure the package is installed and up-to-date with the latest version. This method verifies if there is a newer version for this package every time the server is provisioned. If a new version is found, it is installed.\n        <em>Parameters</em>\n        package_name - Name of the package to install.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.debian import PipRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                with self.using(PipRole) as role:\n                    role.ensure_package_is_up_to_date('django')\n        </pre>","__name__":"ensure_package_up_to_date"},{"__doc__":"Makes sure the requirements file provided is installed.\n        <em>Parameters</em>\n        requeriments_file_name - path to the requirements file (can be provided as absolute path or relative to the directory where provy is run from).\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.debian import PipRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                with self.using(PipRole) as role:\n                    role.ensure_requeriments_installed('/path/to/requirements.txt')\n        </pre>","__name__":"ensure_requeriments_installed"},{"__doc__":null,"__name__":"extract_package_data_from_input"},{"__doc__":"Returns the latest available version of the package at the Python Package Index. If package is not available, returns None.\n        <em>Parameters</em>\n        package_name - Name of the package to verify.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.debian import PipRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                with self.using(PipRole) as role:\n                    version = role.get_package_remote_version('django')\n                    latest = role.get_package_latest_version('django')\n                    if version != latest:\n                        # do something\n                        # this check is not needed if you use ensure_package_up_to_date.\n        </pre>","__name__":"get_package_latest_version"},{"__doc__":"Returns the version of the package currently installed via PIP in the remote server. If package is not installed, returns None.\n        <em>Parameters</em>\n        package_name - Name of the package to verify.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.debian import PipRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                with self.using(PipRole) as role:\n                    version = role.get_package_remote_version('django')\n                    if version and version == '1.1.1':\n                        # do something\n        </pre>","__name__":"get_package_remote_version"},{"__doc__":"Returns True if the given package is installed via pip in the remote server, False otherwise.\n        <em>Parameters</em>\n        package_name - Name of the package to verify.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.debian import PipRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                with self.using(PipRole) as role:\n                    if role.is_package_installed('django', version='1.1.1'):\n                        # do something\n        </pre>","__name__":"is_package_installed"},{"__doc__":"Returns True if there is an update for the given package in the Python Package Index, False otherwise.\n        <em>Parameters</em>\n        package_name - Name of the package to verify.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.debian import PipRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                with self.using(PipRole) as role:\n                    if role.package_can_be_updated('django'):\n                        # do something\n                        # this check is not needed if you use ensure_package_up_to_date.\n        </pre>","__name__":"package_can_be_updated"},{"__doc__":"Installs pip dependencies. This method should be called upon if overriden in base classes, or PIP won't work properly in the remote server.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.debian import PipRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                self.provision_role(PipRole) # does not need to be called if using with block.\n        </pre>","__name__":"provision"},{"__doc__":"Prepares the pip role instance to run its commands with sudo; This is useful when you had previously set a user, and want it to run back as sudo.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.debian import PipRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                with self.using(PipRole) as role:\n                    role.ensure_package_installed('django') # runs as sudo\n                    role.set_user('johndoe')\n                    role.ensure_package_installed('django') # runs as \"johndoe\" user\n                    role.set_sudo()\n                    role.ensure_package_installed('django') # runs as sudo\n        </pre>","__name__":"set_sudo"},{"__doc__":"Prepares the pip role instance to run its commands as a specific user.\n        <em>Parameters</em>\n        user - The username with which the role should run its commands.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.debian import PipRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                with self.using(PipRole) as role:\n                    role.ensure_package_installed('django') # runs as sudo\n                    role.set_user('johndoe')\n                    role.ensure_package_installed('django') # runs as \"johndoe\" user\n        </pre>","__name__":"set_user"}],"__module__":"provy.more.debian.package.pip","__name__":"PipRole"},"__doc__":"Roles in this namespace are meant to provision packages installed via the PIP package manager for Debian distributions.","__name__":"provy.more.debian.package.pip"},"virtualenv":{"VirtualenvRole":{"__doc__":"This role provides virtualenv management. It also provides virtualenvwrapper provisioning, although it's not internally used in this role.\n    When using the object as a context manager (that is, using a \"with\" block) it will make sure that the virtual environment is created and that the commands that run inside it run within this same virtual environment (which affects, for example, the python and pip commands).\n    If the virtual environment already exists, it just bypasses the creation procedure.\n    <em>Context manager parameters</em>\n    env_name - name of the virtual environment to be created and to keep activated when running commands inside the context manager.\n    system_site_packages - if True, will include system-wide site-packages in the virtual environment. Defaults to False.\n    <em>Properties</em>\n    base_directory - directory where the virtual environment subdirectory will be put at. For example, if you set it as \"/home/johndoe/my_envs\", and use venv(\"some_env\"), it will create a virtual environment at \"/home/johndoe/my_envs/some_env\". Defaults to $HOME/.virtualenvs .\n    user - the user with which the virtual environment should be created. Defaults to the context user.\n    <em>Sample usage</em>\n    <pre class=\"sh_python\">\n    from provy.core import Role\n    from provy.more.debian import VirtualenvRole\n\n    class MySampleRole(Role):\n        def provision(self):\n\n            # this example uses the defaults provided\n            with self.using(PipRole) as pip, self.using(VirtualenvRole) as venv, venv('fancylib'):\n                pip.ensure_package_installed('django')\n\n            # this is when you want to set a different base virtualenv directory and user, and include the system-wide site-packages.\n            with self.using(PipRole) as pip, self.using(VirtualenvRole) as venv:\n                venv.base_directory = '/home/johndoe/Envs'\n                venv.user = 'johndoe'\n                with venv('fancylib2', system_site_packages=True):\n                    pip.ensure_package_installed('tornado')\n    </pre>","__fullName__":"provy.more.debian.package.virtualenv.VirtualenvRole","__methods__":[{"__doc__":"Creates a virtual environment.\n        <em>Parameters</em>\n        env_name - name of the virtual environment to be created.\n        system_site_packages - if True, will include system-wide site-packages in the virtual environment. Defaults to False.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.debian import VirtualenvRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                with self.using(VirtualenvRole) as venv:\n                    env_dir = venv.create_env('fancylib') # will return the directory where the virtual environment was created\n        </pre>","__name__":"create_env"},{"__doc__":"Gets the virtual environment directory for a given environment name.\n        Please note that this doesn't check if the env actually exists.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.debian import VirtualenvRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                with self.using(VirtualenvRole) as venv, venc('fancylib'):\n                    self.env_dir('fancylib')\n        </pre>","__name__":"env_dir"},{"__doc__":"Checks if a virtual environment exists.\n        <em>Parameters</em>\n        env_name - name of the virtual environment to be checked.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.debian import VirtualenvRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                with self.using(VirtualenvRole) as venv:\n                    venv.env_exists('fancylib') # True or False\n        </pre>","__name__":"env_exists"},{"__doc__":"Installs virtualenv and virtualenvwrapper, and their dependencies. This method should be called upon if overriden in base classes, or virtualenv won't work properly in the remote server.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.debian import VirtualenvRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                self.provision_role(VirtualenvRole) # does not need to be called if using with block.\n        </pre>","__name__":"provision"}],"__module__":"provy.more.debian.package.virtualenv","__name__":"VirtualenvRole"},"__doc__":"Roles in this namespace are meant to provide virtualenvs and run commands inside a virtualenv, for Debian distributions.","__name__":"provy.more.debian.package.virtualenv"}},"programming":{"__doc__":"Roles in this namespace are meant to configure programming languages in Debian distributions.","__name__":"provy.more.debian.programming","nodejs":{"NodeJsRole":{"__doc__":"This role provides Node.JS utilities for Debian and Ubuntu distributions.\n    <em>Sample usage</em>\n    <pre class=\"sh_python\">\n    from provy.core import Role\n    from provy.more.debian import NodeJsRole\n\n    class MySampleRole(Role):\n        def provision(self):\n            self.provision_role(NodeJsRole)\n    </pre>","__fullName__":"provy.more.debian.programming.nodejs.NodeJsRole","__methods__":[{"__doc__":"Checks if NodeJS is already installed on the server.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.debian import NodeJsRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                with self.using(NodeJsRole) as nodejs:\n                    nodejs.is_already_installed() # True or False\n        </pre>","__name__":"is_already_installed"},{"__doc__":"Installs Node.JS, NPM and their dependencies. This method should be called upon if overriden in base classes, or Node won't work properly in the remote server.\n        If the server is a Debian, will install via source packages, if it's Ubuntu, will install via Chris Lea's official PPA repository.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.debian import NodeJsRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                self.provision_role(NodeJsRole) # no need to call this if using with block.\n        </pre>","__name__":"provision"},{"__doc__":"Installs Node.JS, NPM and their dependencies via source packages.\n        It's not recommended that you use this method directly; Instead, provision this role directly and it will find out the best way to provision.\n        Also, this method doesn't check if NodeJS is already installed before provisioning it.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.debian import NodeJsRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                with self.using(NodeJsRole) as nodejs:\n                    nodejs.provision_to_debian()\n        </pre>","__name__":"provision_to_debian"},{"__doc__":"Installs Node.JS, NPM and their dependencies via Chris Lea's official PPA repository.\n        It's not recommended that you use this method directly; Instead, provision this role directly and it will find out the best way to provision.\n        Also, this method doesn't check if NodeJS is already installed before provisioning it.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.debian import NodeJsRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                with self.using(NodeJsRole) as nodejs:\n                    nodejs.provision_to_ubuntu()\n        </pre>","__name__":"provision_to_ubuntu"}],"__module__":"provy.more.debian.programming.nodejs","__name__":"NodeJsRole"},"__doc__":"Roles in this namespace are meant to provide Node.JS utility methods for Debian and Ubuntu distributions.","__name__":"provy.more.debian.programming.nodejs"},"php":{"PHPRole":{"__doc__":"This role provides PHP utilities for Debian distributions.\n    Additionally, installs php5-dev (PHP source libraries), php-pear (PHP package management) and php5-fpm (FastCGI implementation for PHP which can be used with Nginx).\n\n    <em>Sample usage</em>\n    <pre class=\"sh_python\">\n    from provy.core import Role\n    from provy.more.debian import PHPRole\n\n    class MySampleRole(Role):\n        def provision(self):\n            self.provision_role(PHPRole)\n    </pre>","__fullName__":"provy.more.debian.programming.php.PHPRole","__methods__":[{"__doc__":"Installs PHP 5 (probably 5.3, depending on your server) and its dependencies.\n        If your server is a Debian (non-derived) machine, it also adds the <a href=\"http://www.dotdeb.org/about/\" title=\"dotdeb\">dotdeb</a> repositories for PHP 5.3, so that you can use them with AptitudeRole to install what you need.\n        This method should be called upon if overriden in base classes, or PHP won't work properly in the remote server.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.debian import PHPRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                self.provision_role(PHPRole) # no need to call this if using with block.\n\n        </pre>","__name__":"provision"}],"__module__":"provy.more.debian.programming.php","__name__":"PHPRole"},"__doc__":null,"__name__":"provy.more.debian.programming.php"},"ruby":{"RubyRole":{"__doc__":"This role provides Ruby utilities for Debian distributions.\n\n    <em>Sample usage</em>\n    <pre class=\"sh_python\">\n    from provy.core import Role\n    from provy.more.debian import RubyRole\n\n    class MySampleRole(Role):\n        def provision(self):\n            self.provision_role(RubyRole)\n    </pre>","__fullName__":"provy.more.debian.programming.ruby.RubyRole","__methods__":[{"__doc__":"Installs Ruby and its dependencies. This method should be called upon if overriden in base classes, or Ruby won't work properly in the remote server.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.debian import RubyRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                self.provision_role(RubyRole) # no need to call this if using with block.\n\n        </pre>","__name__":"provision"}],"__module__":"provy.more.debian.programming.ruby","__name__":"RubyRole"},"__doc__":"Roles in this namespace are meant to provide Ruby utility methods for Debian distributions.","__name__":"provy.more.debian.programming.ruby"}},"users":{"__doc__":"Roles in this namespace are meant to enable user management in Debian distributions.","__name__":"provy.more.debian.users","ssh":{"SSHRole":{"__doc__":"This role provides SSH keygen utilities for Debian distributions.\n    <em>Sample usage</em>\n    <pre class=\"sh_python\">\n    from provy.core import Role\n    from provy.more.debian import SSHRole\n\n    class MySampleRole(Role):\n        def provision(self):\n            with self.using(SSHRole) as role:\n                role.ensure_ssh_key(user='someuser', private_key_file=\"private-key\")\n    </pre>","__fullName__":"provy.more.debian.users.ssh.SSHRole","__methods__":[{"__doc__":"Ensures that the specified private ssh key is present in the remote server. Also creates the public key for this private key.\n        The private key file must be a template and be accessible to the Role.render method.\n        <em>Parameters</em>\n        user - Owner of the keys\n        private_key_file - Template file for the private key.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.debian import SSHRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                with self.using(SSHRole) as role:\n                    role.ensure_ssh_key(user='someuser', private_key_file=\"private-key\")\n        </pre>","__name__":"ensure_ssh_key"}],"__module__":"provy.more.debian.users.ssh","__name__":"SSHRole"},"__doc__":"Roles in this namespace are meant to provide SSH keygen utilities for Debian distributions.","__name__":"provy.more.debian.users.ssh"},"user":{"UserRole":{"__doc__":"This role provides many utility methods for user management operations within Debian distributions.\n    <em>Sample usage</em>\n    <pre class=\"sh_python\">\n    from provy.core import Role\n    from provy.more.debian import UserRole\n\n    class MySampleRole(Role):\n        def provision(self):\n            with self.using(UserRole) as role:\n                role.ensure_user('myuser', identified_by='mypass', is_admin=True)\n    </pre>","__fullName__":"provy.more.debian.users.user.UserRole","__methods__":[{"__doc__":"Ensures that a given user group is present in the remote server.\n        <em>Parameters</em>\n        group_name - Name of the group to create.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.debian import UserRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                with self.using(UserRole) as role:\n                    role.ensure_group('users-group')\n        </pre>","__name__":"ensure_group"},{"__doc__":"Ensures that a given user is present in the remote server.\n        <em>Parameters</em>\n        username - Name of the user.\n        identified_by - Password that the user will use to login to the remote server. If set to None, the user will not have a password.\n        home_folder - Defaults to /home/&lt;username&gt;. Specifies the user's home folder.\n        default_script - Defaults to /bin/sh. Sets the user's default script, the one that will execute commands per default when logging in.\n        groups - Defaults to the name of the user. Groups that this user belongs to. If the groups do not exist they are created prior to user creation.\n        is_admin - If set to True the user is added to the 'admin' user group as well.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.debian import UserRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                with self.using(UserRole) as role:\n                    role.ensure_user('myuser', identified_by='mypass', is_admin=True)\n        </pre>","__name__":"ensure_user"},{"__doc__":null,"__name__":"ensure_user_groups"},{"__doc__":"Returns True if the given group exist, False otherwise.\n        <em>Parameters</em>\n        group_name - Name of the group to verify.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.debian import UserRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                with self.using(UserRole) as role:\n                    if role.group_exists('usersgroup'):\n                        # do something\n        </pre>","__name__":"group_exists"},{"__doc__":"Returns True if the given user exist, False otherwise.\n        <em>Parameters</em>\n        username - Name of the user to verify.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.debian import UserRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                with self.using(UserRole) as role:\n                    if role.user_exists('myuser'):\n                        # do something\n        </pre>","__name__":"user_exists"},{"__doc__":"Returns True if the given user is in the given group, False otherwise.\n        <em>Parameters</em>\n        username - Name of the user to verify.\n        group_name - Name of the group to verify.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.debian import UserRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                with self.using(UserRole) as role:\n                    if role.user_in_group('myuser', 'mygroup'):\n                        # do something\n        </pre>","__name__":"user_in_group"}],"__module__":"provy.more.debian.users.user","__name__":"UserRole"},"__doc__":"Roles in this namespace are meant to provide user management operations for Debian distributions.","__name__":"provy.more.debian.users.user"}},"vcs":{"__doc__":"Roles in this namespace relate to <a href=\"http://en.wikipedia.org/wiki/Revision_control\">Version Control Systems</a> support in Debian distributions, such as git, svn or mercurial.","__name__":"provy.more.debian.vcs","git":{"GitRole":{"__doc__":"This role provides utility methods for Git repositories management within Debian distributions.\n    <em>Sample usage</em>\n    <pre class=\"sh_python\">\n    from provy.core import Role\n    from provy.more.debian import GitRole\n\n    class MySampleRole(Role):\n        def provision(self):\n            with self.using(GitRole) as role:\n                role.ensure_repository('git://github.com/heynemann/provy.git',\n                                       '/home/user/provy',\n                                       owner='user',\n                                       branch='some-branch')\n    </pre>","__fullName__":"provy.more.debian.vcs.git.GitRole","__methods__":[{"__doc__":"Makes sure the repository is create in the remote server. This method does not update the repository or perform any operations in it. It is merely used to ensure that the repository exists in the specified path.\n        <em>Parameters</em>\n        repo - Git repository url.\n        path - Path to create the local repository.\n        owner - User that owns the repository directory.\n        branch - If specified, the given branch will be checked-out, otherwise it stays in the master branch.\n        sudo - If False, won't sudo when creating the repository. Defaults to True.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.debian import GitRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                with self.using(GitRole) as role:\n                    role.ensure_repository('git://github.com/heynemann/provy.git',\n                                           '/home/user/provy',\n                                           owner='user',\n                                           branch='some-branch')\n        </pre>","__name__":"ensure_repository"},{"__doc__":"Installs git dependencies. This method should be called upon if overriden in base classes, or Git won't work properly in the remote server.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.debian import GitRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                self.provision_role(GitRole) # does not need to be called if using with block.\n        </pre>","__name__":"provision"}],"__module__":"provy.more.debian.vcs.git","__name__":"GitRole"},"__doc__":"Roles in this namespace are meant to provide Git repository creation operations within Debian distributions.","__name__":"provy.more.debian.vcs.git"}},"web":{"__doc__":"Roles in this namespace are meant to configure either Web Servers (apache, nginx) or Web App Servers (tornado, django, rails) in Debian distributions.","__name__":"provy.more.debian.web","apache":{"ApacheRole":{"__doc__":"This role provides Apache HTTP Server management utilities for Debian distributions.\n    Provisions with apache2 as default, that is, it uses the apache2-mpm-worker variant.\n    If you want to use the apache2-mpm-prefork variant, just use install this package with AptitudeRole and restart Apache.\n    <em>Sample usage</em>\n    <pre class=\"sh_python\">\n    from provy.core import Role\n    from provy.more.debian import ApacheRole\n\n    class MySampleRole(Role):\n        def provision(self):\n            with self.using(ApacheRole) as role:\n                role.ensure_mod('php5') # Installs and enables mod_php\n                role.ensure_site_disabled('default')\n                role.create_site(site='my-site', template='my-site')\n                role.ensure_site_enabled('my-site')\n    </pre>","__fullName__":"provy.more.debian.web.apache.ApacheRole","__methods__":[{"__doc__":"Restarts Apache if any changes have been made.\n        There's no need to call this method manually.","__name__":"cleanup"},{"__doc__":"Adds a website with the specified template to Apache list of available sites.\n        Warning: Do not forget to call <em>ensure_site_enabled</em> after a call to create_site, or your site won't be enabled.\n        <em>Parameters</em>\n        site - Name of the site to enable.\n        template - Site configuration template.\n        options - Options to pass to the template. Defaults to empty dict ({}).\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.debian import ApacheRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                with self.using(ApacheRole) as role:\n                    role.create_site(site='my-site', template='my-site', options={\n                        \"foo\": \"bar\"\n                    })\n        </pre>","__name__":"create_site"},{"__doc__":"Installs the module package and enables it in Apache.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.debian import ApacheRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                with self.using(ApacheRole) as role:\n                    role.ensure_mod('php5') # Installs \"libapache2-mod-php5\" and enables it\n        </pre>","__name__":"ensure_mod"},{"__doc__":"Ensures that Apache gets restarted on cleanup. There's no need to call this method as any changes to Apache will trigger it.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.debian import ApacheRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                with self.using(ApacheRole) as role:\n                    role.ensure_restart()\n        </pre>","__name__":"ensure_restart"},{"__doc__":"Ensures that the specified site is removed from the Apache list of enabled sites.\n        <em>Parameters</em>\n        site - Name of the site to disable.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.debian import ApacheRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                with self.using(ApacheRole) as role:\n                    role.ensure_site_disabled('default')\n        </pre>","__name__":"ensure_site_disabled"},{"__doc__":"Ensures that a symlink is created for the specified site at the Apache list of enabled sites from the list of available sites.\n        <em>Parameters</em>\n        site - Name of the site to enable.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.debian import ApacheRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                with self.using(ApacheRole) as role:\n                    role.ensure_site_enabled('my-site')\n        </pre>","__name__":"ensure_site_enabled"},{"__doc__":"Installs Apache dependencies. This method should be called upon if overriden in base classes, or Apache won't work properly in the remote server.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.debian import ApacheRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                self.provision_role(ApacheRole) # does not need to be called if using with block.\n        </pre>","__name__":"provision"},{"__doc__":"Forcefully restarts Apache.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.debian import ApacheRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                with self.using(ApacheRole) as role:\n                    role.restart()\n        </pre>","__name__":"restart"}],"__module__":"provy.more.debian.web.apache","__name__":"ApacheRole"},"__doc__":"Roles in this namespace are meant to provide Apache HTTP Server utility methods for Debian distributions.","__name__":"provy.more.debian.web.apache"},"django":{"DjangoRole":{"__doc__":"This role provides Django app server management utilities for Debian distributions.\n    When running Django under supervisor, remember to set <em>restart_supervisor_on_changes</em> to True.\n    If you choose to automatically include supervisor support in your sites, don't forget to call <em>SupervisorRole</em> config method.\n    When creating a new site using <em>with role.create_site('somesite') as site</em> these are the properties available in the site object:\n    <em>auto_start</em> - Indicates whether the site should be automatically started by the operating system. Defaults to True. If using supervisor, explicitly set this to False.\n    <em>daemon</em> - Indicates whether the init.d command for the website should daemonize itself. Defaults to True. If using supervisor, explicitly set this to False.\n    <em>settings_path</em> - This is the only mandatory argument. This is the full path to django's settings.py file.\n    <em>host</em> - The host IP address that django will listen to incoming requests. Defaults to '0.0.0.0'.\n    <em>starting_port</em> - The first port that Django will be started in the event that more than one process is used. Defaults to 8000.\n    <em>processes</em> - The number of processes that will have commands created at the server. As an example, if this is set to 2 and the name of the site is 'website', two commands will be created: /etc/init.d/website-8000 and /etc/init.d/website-8001. Defaults to 1.\n    <em>pid_file_path</em> - Path to create the pid file. Defaults to '/var/run'.\n    <em>threads</em> - Number of worker threads that Green Unicorn will use when spawning Django. Defaults to 1.\n    <em>user</em> - User that gunicorn will run under. Defaults to the last created user. When using supervisor it is VERY important that this user is the same user as supervisor's.\n    <em>use_supervisor</em> - States that supervisor configuration for these django website should be automatically included.\n    <em>supervisor_log_folder</em> - Log folder that supervisor will store the configurations for this site.\n    <em>settings</em> - Dictionary with settings that will overwrite Django's defaults. These settings will be included in a local_settings.py module that imports the original settings as KEY=value pairs. All values included here will have their string representation used in the local_settings.\n\n    <em>Sample usage</em>\n    <pre class=\"sh_python\">\n    from provy.core import Role\n    from provy.more.debian import DjangoRole\n\n    class MySampleRole(Role):\n        def provision(self):\n            with self.using(SupervisorRole) as role:\n                role.config(\n                    config_file_directory='/home/someuser',\n                    log_file='/home/someuser/logs/supervisord.log',\n                    user='myuser'\n                )\n\n            with self.using(DjangoRole) as role:\n                role.restart_supervisor_on_changes = True\n                with role.create_site('mysite') as site:\n                    site.path = '/some/folder/with/settings.py'\n                    site.use_supervisor = True\n                    site.supervisor_log_path = '/some/folder/to/log'\n                    site.threads = 4\n                    site.processes = 2\n                    site.user = 'myuser'\n                    # settings that override the website defaults.\n                    site.settings = {\n\n                    }\n    </pre>","__fullName__":"provy.more.debian.web.django.DjangoRole","__methods__":[{"__doc__":"Updates the website and/or init files and restarts websites if needed.\n        There's no need to call this method since provy's lifecycle will make sure it is called.","__name__":"cleanup"},{"__doc__":"Enters a with block with a Site variable that allows you to configure a django website.\n        <em>Parameters</em>\n        name - name of the website.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.debian import DjangoRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                with self.using(DjangoRole) as role:\n                    with role.create_site('website') as program:\n                        site.path = '/some/folder/with/settings.py'\n                        site.threads = 4\n                        # settings that override the website defaults.\n                        site.settings = {\n\n                        }\n        </pre>","__name__":"create_site"},{"__doc__":"Installs Django and its dependencies. This method should be called upon if overriden in base classes, or Django won't work properly in the remote server.\n        If you set a variable called django-version in the context, that version of django will be installed instead of latest.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.debian import DjangoRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                self.provision_role(DjangoRole) # no need to call this if using with block.\n\n        # or\n        class MySampleRole(Role):\n            def provision(self):\n                self.context['django-version'] = '1.1.1'\n                self.provision_role(DjangoRole) # no need to call this if using with block.\n                # now django 1.1.1 is installed.\n        </pre>","__name__":"provision"}],"__module__":"provy.more.debian.web.django","__name__":"DjangoRole"},"__doc__":"Roles in this namespace are meant to provide Django app server utility methods for Debian distributions.","__name__":"provy.more.debian.web.django"},"nginx":{"NginxRole":{"__doc__":"This role provides Nginx web server management utilities for Debian distributions.\n    <em>Sample usage</em>\n    <pre class=\"sh_python\">\n    from provy.core import Role\n    from provy.more.debian import NginxRole\n\n    class MySampleRole(Role):\n        def provision(self):\n            with self.using(NginxRole) as role:\n                role.ensure_conf(conf_template='nginx.conf')\n                role.ensure_site_disabled('default')\n                role.create_site(site='my-site', template='my-site')\n                role.ensure_site_enabled('my-site')\n    </pre>","__fullName__":"provy.more.debian.web.nginx.NginxRole","__methods__":[{"__doc__":"Restarts nginx if any changes have been made.\n        There's no need to call this method manually.","__name__":"cleanup"},{"__doc__":"Adds a website with the specified template to Nginx list of available sites.\n        Warning: Do not forget to call <em>ensure_site_enabled</em> after a call to create_site, or your site won't be enabled.\n        <em>Parameters</em>\n        site - Name of the site to enable.\n        template - Site configuration template.\n        options - Options to pass to the template.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.debian import NginxRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                with self.using(NginxRole) as role:\n                    role.create_site(site='my-site', template='my-site', options={\n                        \"user\": \"me\"\n                    })\n        </pre>","__name__":"create_site"},{"__doc__":"Ensures that nginx configuration is up-to-date with the specified template.\n        <em>Parameters</em>\n        conf_template - Name of the template for nginx.conf.\n        options - Dictionary of options passed to template. Extends context.\n        nginx_conf_path - Path of the nginx configuration file. Defaults to /etc/nginx/nginx.conf.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.debian import NginxRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                with self.using(NginxRole) as role:\n                    role.ensure_conf(conf_template='nginx.conf')\n        </pre>","__name__":"ensure_conf"},{"__doc__":"Ensures that nginx gets restarted on cleanup. There's no need to call this method as any changes to nginx will trigger it.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.debian import NginxRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                with self.using(NginxRole) as role:\n                    role.ensure_restart()\n        </pre>","__name__":"ensure_restart"},{"__doc__":"Ensures that the specified site is removed from nginx list of enabled sites.\n        <em>Parameters</em>\n        site - Name of the site to disable.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.debian import NginxRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                with self.using(NginxRole) as role:\n                    role.ensure_site_disabled('default')\n        </pre>","__name__":"ensure_site_disabled"},{"__doc__":"Ensures that a symlink is created for the specified site at nginx list of enabled sites from the list of available sites.\n        <em>Parameters</em>\n        site - Name of the site to enable.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.debian import NginxRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                with self.using(NginxRole) as role:\n                    role.ensure_site_enabled('my-site')\n        </pre>","__name__":"ensure_site_enabled"},{"__doc__":"Installs Nginx dependencies. This method should be called upon if overriden in base classes, or Nginx won't work properly in the remote server.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.debian import NginxRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                self.provision_role(NginxRole) # does not need to be called if using with block.\n        </pre>","__name__":"provision"},{"__doc__":"Forcefully restarts nginx.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.debian import NginxRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                with self.using(NginxRole) as role:\n                    role.restart()\n        </pre>","__name__":"restart"}],"__module__":"provy.more.debian.web.nginx","__name__":"NginxRole"},"__doc__":"Roles in this namespace are meant to provide Nginx web server utility methods for Debian distributions.","__name__":"provy.more.debian.web.nginx"},"rails":{"RailsRole":{"__doc__":"This role provides Rails application utilities for Debian distributions.\n    <em>Sample usage</em>\n    <pre class=\"sh_python\">\n    from provy.core import Role\n    from provy.more.debian import RailsRole\n\n    class MySampleRole(Role):\n        def provision(self):\n            with self.using(RailsRole) as role:\n                role.ensure_site_disabled('default')\n                role.create_site(site='my-site', path='/home/myuser/my-site)\n                role.ensure_site_enabled('my-site')\n    </pre>","__fullName__":"provy.more.debian.web.rails.RailsRole","__methods__":[{"__doc__":"Restarts nginx if any changes have been made.\n        There's no need to call this method manually.","__name__":"cleanup"},{"__doc__":"Adds a website with the specified template to Nginx list of available sites.\n        Warning: Do not forget to call <em>ensure_site_enabled</em> after a call to create_site, or your site won't be enabled.\n        <em>Parameters</em>\n        site - Name of the site to enable.\n        host - Server domain that NGINX should respond by.\n        path - Path of the rails app.\n        port - Port that NGINX will listen in. Defaults to 80.\n        options - Options to pass to the NGINX template.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.debian import RailsRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                with self.using(RailsRole) as role:\n                    role.create_site(site='my-site',\n                                     host='localhost www.mysite.com',\n                                     port=8888,\n                                     path='/home/myuser/my-rails-site')\n        </pre>","__name__":"create_site"},{"__doc__":"Ensures that nginx gets restarted on cleanup. There's no need to call this method as any changes to nginx will trigger it.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.debian import NginxRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                with self.using(NginxRole) as role:\n                    role.ensure_restart()\n        </pre>","__name__":"ensure_restart"},{"__doc__":"Ensures that the specified site is removed from nginx list of enabled sites.\n        <em>Parameters</em>\n        site - Name of the site to disable.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.debian import RailsRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                with self.using(RailsRole) as role:\n                    role.ensure_site_disabled('default')\n        </pre>","__name__":"ensure_site_disabled"},{"__doc__":"Ensures that a symlink is created for the specified site at nginx list of enabled sites from the list of available sites.\n        <em>Parameters</em>\n        site - Name of the site to enable.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.debian import RailsRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                with self.using(RailsRole) as role:\n                    role.ensure_site_enabled('my-site')\n        </pre>","__name__":"ensure_site_enabled"},{"__doc__":"Installs Rails dependencies. This method should be called upon if overriden in base classes, or Rails won't work properly in the remote server.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.debian import RailsRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                self.provision_role(RailsRole) # does not need to be called if using with block.\n        </pre>","__name__":"provision"},{"__doc__":"Forcefully restarts nginx.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.debian import NginxRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                with self.using(NginxRole) as role:\n                    role.restart()\n        </pre>","__name__":"restart"}],"__module__":"provy.more.debian.web.rails","__name__":"RailsRole"},"__doc__":"Roles in this namespace are meant to provide Rails applications utility methods for Debian distributions.","__name__":"provy.more.debian.web.rails"},"tornado":{"TornadoRole":{"__doc__":"This role provides Tornado app server management utilities for Debian distributions.\n    <em>Sample usage</em>\n    <pre class=\"sh_python\">\n    from provy.core import Role\n    from provy.more.debian import TornadoRole\n\n    class MySampleRole(Role):\n        def provision(self):\n            self.provision_role(TornadoRole)\n    </pre>","__fullName__":"provy.more.debian.web.tornado.TornadoRole","__methods__":[{"__doc__":"Installs Tornado and its dependencies. This method should be called upon if overriden in base classes, or Tornado won't work properly in the remote server.\n        <em>Sample usage</em>\n        <pre class=\"sh_python\">\n        from provy.core import Role\n        from provy.more.debian import TornadoRole\n\n        class MySampleRole(Role):\n            def provision(self):\n                self.provision_role(TornadoRole)\n        </pre>","__name__":"provision"}],"__module__":"provy.more.debian.web.tornado","__name__":"TornadoRole"},"__doc__":"Roles in this namespace are meant to provide Tornado app server utility methods for Debian distributions.","__name__":"provy.more.debian.web.tornado"}}},"linux":{"__doc__":null,"__name__":"provy.more.linux","networking":{"__doc__":"Roles in this namespace are meant to provide networking management capabilities.","__name__":"provy.more.linux.networking","hosts":{"HostsRole":{"__doc__":"This role provides hosts file management utilities.\n    <em>Sample usage</em>\n    <pre class=\"sh_python\">\n    from provy.core import Role\n    from provy.more.linux import HostsRole\n\n    class MySampleRole(Role):\n        def provision(self):\n            with self.using(HostsRole) as role:\n                role.ensure_host('localhost', '127.0.0.1')\n    </pre>","__fullName__":"provy.more.linux.networking.hosts.HostsRole","__methods__":[{"__doc__":null,"__name__":"ensure_host"}],"__module__":"provy.more.linux.networking.hosts","__name__":"HostsRole"},"__doc__":"Roles in this namespace are meant to provide hosts management operations.","__name__":"provy.more.linux.networking.hosts"}}}}}}